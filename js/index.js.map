{
  "version": 3,
  "sources": ["../emulator/instructions.ts", "../emulator/util.ts", "../editor/tokenizer.ts", "../editor/editor.ts", "../scroll-out/scroll-out.ts", "../emulator/compiler.ts", "../emulator/devices/clock.ts", "../emulator/devices/console-io.ts", "../emulator/devices/display.ts", "../emulator/devices/controlpad.ts", "../emulator/devices/gamepad.ts", "../webgl/shader.ts", "../emulator/devices/gl-display.ts", "../emulator/devices/keyboard.ts", "../emulator/devices/keyboardpad.ts", "../emulator/devices/mouse.ts", "../emulator/devices/rng.ts", "../emulator/devices/sound.ts", "../emulator/devices/storage.ts", "../emulator/breaks.ts", "../emulator/emulator.ts", "../emulator/parser.ts", "../index.ts"],
  "sourcesContent": ["import {enum_count, object_map} from \"./util.js\";\r\n\r\n// export \r\nexport enum Opcode {\r\n    // Core Instructions\r\n    ADD, RSH, LOD, STR, BGE, NOR, IMM,\r\n    // Basic Instructions\r\n    SUB, JMP, MOV, NOP, LSH, INC, DEC, NEG,\r\n    AND, OR, NOT, XNOR, XOR, NAND,\r\n    BRL, BRG, BRE, BNE, BOD, BEV, BLE, BRZ,\r\n    BNZ, BRN, BRP, PSH, POP, CAL, RET, HLT,\r\n    CPY, BRC, BNC,\r\n\r\n    // Complex Instructions\r\n    MLT, DIV, MOD, BSR, BSL, SRS, BSS,\r\n    SETE, SETNE, SETG, SETL, SETGE, SETLE,\r\n    SETC, SETNC, LLOD, LSTR,\r\n\r\n    // IO Instructions\r\n    IN, OUT,\r\n    \r\n    // Signed Instructions\r\n    SDIV, SBRL, SBRG, SBLE , SBGE, SSETL, SSETG, SSETLE, SSETGE,\r\n\r\n    //----- Debug Instructions\r\n    __ASSERT,\r\n    __ASSERT0,\r\n    __ASSERT_EQ,\r\n    __ASSERT_NEQ\r\n}\r\n\r\nexport enum Register {\r\n    PC, SP\r\n}\r\nexport const register_count = enum_count(Register);\r\n\r\nexport enum Operant_Prim {\r\n    Reg, Imm,\r\n}\r\n\r\nexport enum Operant_Type {\r\n    Reg = Operant_Prim.Reg, Imm = Operant_Prim.Imm,\r\n    Memory, Label, Data_Label, Constant, String\r\n}\r\n\r\nexport enum Operant_Operation {\r\n    SET, GET, GET_RAM, SET_RAM, RAM_OFFSET\r\n}\r\n\r\nexport enum URCL_Header {\r\n    BITS, MINREG, MINHEAP, RUN, MINSTACK\r\n}\r\n\r\nexport enum Constants {\r\n    BITS, MSB, SMSB, MAX, SMAX, UHALF, LHALF,\r\n    MINREG, MINHEAP, HEAP, MINSTACK\r\n}\r\n\r\n\r\nexport enum Header_Operant {\r\n    \"==\", \"<=\", \">=\"\r\n}\r\nexport enum Header_Run {\r\n    ROM, RAM\r\n}\r\n\r\ninterface URCL_Header_Def {\r\n    def: number,\r\n    def_operant?: Header_Operant,\r\n    in?: Record<string, unknown>\r\n}\r\n\r\nexport const urcl_headers: Record<URCL_Header, URCL_Header_Def> = {\r\n    [URCL_Header.BITS]: {def: 8, def_operant: Header_Operant[\"==\"]},\r\n    [URCL_Header.MINREG]: {def: 8},\r\n    [URCL_Header.MINHEAP]: {def: 16},\r\n    [URCL_Header.RUN]: {def: Header_Run.ROM, in: Header_Run},\r\n    [URCL_Header.MINSTACK]: {def: 8},\r\n}\r\n\r\nexport enum IO_Port {\r\n    // General\r\n    CPUBUS, TEXT, NUMB, SUPPORTED = 5, SPECIAL, PROFILE,\r\n    // Graphics\r\n    X, Y, COLOR, BUFFER, G_SPECIAL = 15,\r\n    // Text\r\n    ASCII, CHAR5, CHAR6, ASCII7, UTF8, UTF16, UTF32, T_SPECIAL = 23,\r\n    // Numbers\r\n    INT, UINT, BIN, HEX, FLOAT, FIXED, N_SPECIAL=31,\r\n    // Storage\r\n    ADDR, BUS, PAGE, S_SPECIAL=39,\r\n    // Miscellaneous\r\n    RNG, NOTE, INSTR, NLEG, WAIT, NADDR, DATA, M_SPECIAL,\r\n    // User defined\r\n    UD1, UD2, UD3, UD4, UD5, UD6, UD7, UD8, UD9, UD10, UD11, UD12, UD13, UD14, UD15, UD16,\r\n\r\n    GAMEPAD, AXIS, GAMEPAD_INFO,\r\n    KEY,\r\n    MOUSE_X, MOUSE_Y, MOUSE_DX, MOUSE_DY,\r\n    MOUSE_DWHEEL,\r\n    MOUSE_BUTTONS,\r\n    FILE,\r\n}\r\n\r\nexport interface Instruction_Ctx {\r\n    readonly bits: number,\r\n    readonly max_value: number,\r\n    readonly max_signed: number,\r\n    readonly sign_bit: number,\r\n    pc: number;\r\n    a: number,\r\n    b: number,\r\n    c: number,\r\n    sa: number,\r\n    sb: number,\r\n    sc: number,\r\n    m_set(a: number, v: number): void;\r\n    m_get(a: number): number;\r\n    push(a: number): void;\r\n    pop(): number;\r\n    in(port: number): boolean;\r\n    out(port: number, value: number): void;\r\n    warn(msg: string): void;\r\n}\r\n\r\ntype Instruction_Callback = (ctx: Instruction_Ctx) => void | boolean;\r\n\r\nconst {SET, GET, GET_RAM: GAM, SET_RAM: SAM, RAM_OFFSET: RAO} = Operant_Operation;\r\nexport const Opcodes_operants: Record<Opcode, [Operant_Operation[], Instruction_Callback]> = {\r\n    //----- Core Instructions\r\n    // Add Op2 to Op3 then put result into Op1\r\n    [Opcode.ADD ]: [[SET, GET, GET], (s) => {s.a = s.b + s.c}],\r\n    // Unsigned right shift Op2 once then put result into Op1\r\n    [Opcode.RSH ]: [[SET, GET     ], (s) => {s.a = s.b >>> 1}],\r\n    // Copy RAM value pointed to by Op2 into Op1\r\n    [Opcode.LOD ]: [[SET, GAM     ], (s) => {s.a = s.m_get(s.b)}],\r\n    // Copy Op2 into RAM value pointed to by Op1\r\n    [Opcode.STR ]: [[SAM, GET     ], (s) => s.m_set(s.a, s.b)],\r\n    // Branch to address specified by Op1 if Op2 is more than or equal to Op3\r\n    [Opcode.BGE ]: [[GET, GET, GET], (s) => {if (s.b >= s.c) s.pc = s.a}],\r\n    [Opcode.SBGE ]: [[GET, GET, GET], (s) => {if (s.sb >= s.sc) s.pc = s.a}],\r\n    // Bitwise NOR Op2 and Op3 then put result into Op1\r\n    [Opcode.NOR ]: [[SET, GET, GET], (s) => {s.a = ~(s.b | s.c)}],\r\n    // Load immediate\r\n    [Opcode.IMM ]: [[SET, GET     ], (s) => {s.a = s.b}],\r\n    \r\n    //----- Basic Instructions\r\n    // Subtract Op3 from Op2 then put result into Op1\r\n    [Opcode.SUB ]: [[SET, GET, GET], (s) => {s.a = s.b - s.c}],\r\n    // Branch to address specified by Op1\r\n    [Opcode.JMP ]: [[GET          ], (s) => {s.pc = s.a}],\r\n    // Copy Op2 to Op1\r\n    [Opcode.MOV ]: [[SET, GET     ], (s) => {s.a = s.b}],\r\n    // Copy Op2 to Op1\r\n    [Opcode.NOP ]: [[             ], ()=> false],\r\n    // Left shift Op2 once then put result into Op1\r\n    [Opcode.LSH ]: [[SET, GET     ], (s) => {s.a = s.b << 1}],\r\n    // Add 1 to Op2 then put result into Op1\r\n    [Opcode.INC ]: [[SET, GET     ], (s) => {s.a = s.b + 1}],\r\n    // Subtract 1 from Op2 then put result into Op1\r\n    [Opcode.DEC ]: [[SET, GET     ], (s) => {s.a = s.b - 1}],\r\n    // Calculates the 2s complement of Op2 then puts answer into Op1\r\n    [Opcode.NEG ]: [[SET, GET     ], (s) => {s.a = -s.b}],\r\n    // Bitwise AND Op2 and Op3 then put result into Op1\r\n    [Opcode.AND ]: [[SET, GET, GET], (s) => {s.a = s.b & s.c}],\r\n    // Bitwise OR Op2 and Op3 then put result into Op1\r\n    [Opcode.OR  ]: [[SET, GET, GET], (s) => {s.a = s.b | s.c}],\r\n    // Bitwise NOT of Op2 then put result into Op1\r\n    [Opcode.NOT ]: [[SET, GET     ], (s) => {s.a = ~s.b}],\r\n    // Bitwise XNOR Op2 and Op3 then put result into Op1\r\n    [Opcode.XNOR]: [[SET, GET, GET], (s) => {s.a = ~(s.b ^ s.c)}],\r\n    // Bitwise XOR Op2 and Op3 then put result into Op1\r\n    [Opcode.XOR ]: [[SET, GET, GET], (s) => {s.a = s.b ^ s.c}],\r\n    // Bitwise NAND Op2 and Op3 then put result into Op1\r\n    [Opcode.NAND]: [[SET, GET, GET], (s) => {s.a = ~(s.b & s.c)}],\r\n    // Branch to address specified by Op1 if Op2 is less than Op3\r\n    [Opcode.BRL ]: [[GET, GET, GET], (s) => {if (s.b < s.c) s.pc = s.a}],\r\n    [Opcode.SBRL ]: [[GET, GET, GET], (s) => {if (s.sb < s.sc) s.pc = s.a}],\r\n    // Branch to address specified by Op1 if Op2 is more than Op3\r\n    [Opcode.BRG ]: [[GET, GET, GET], (s) => {if (s.b > s.c) s.pc = s.a}],\r\n    [Opcode.SBRG ]: [[GET, GET, GET], (s) => {if (s.sb > s.sc) s.pc = s.sa}],\r\n    // Branch to address specified by Op1 if Op2 is equal to Op3\r\n    [Opcode.BRE ]: [[GET, GET, GET], (s) => {if (s.b === s.c) s.pc = s.a}],\r\n    // Branch to address specified by Op1 if Op2 is not equal to Op3\r\n    [Opcode.BNE ]: [[GET, GET, GET], (s) => {if (s.b !== s.c) s.pc = s.a}],\r\n    // Branch to address specified by Op1 if Op2 is Odd (AKA the lowest bit is active)\r\n    [Opcode.BOD ]: [[GET, GET     ], (s) => {if (s.b & 1) s.pc = s.a}],\r\n    // Branch to address specified by Op1 if Op2 is Even (AKA the lowest bit is not active)\r\n    [Opcode.BEV ]: [[GET, GET     ], (s) => {if (!(s.b & 1)) s.pc = s.a}],\r\n    // Branch to address specified by Op1 if Op2 is less than or equal to Op3\r\n    [Opcode.BLE ]: [[GET, GET, GET], (s) => {if (s.b <= s.c) s.pc = s.a}],\r\n    [Opcode.SBLE ]: [[GET, GET, GET], (s) => {if (s.sb <= s.sc) s.pc = s.a}],\r\n    // Branch to address specified by Op1 if Op2 equal to 0\r\n    [Opcode.BRZ ]: [[GET, GET     ], (s) => {if (s.b === 0) s.pc = s.a}],\r\n    // Branch to address specified by Op1 if Op2 is not equal to 0\r\n    [Opcode.BNZ ]: [[GET, GET     ], (s) => {if (s.b !== 0) s.pc = s.a}],\r\n    // Branch to address specified by Op1 if the result of the previous instruction is negative (AKA the upper most bit is active)\r\n    [Opcode.BRN ]: [[GET, GET     ], (s) => {if (s.b & s.sign_bit) s.pc = s.a}],\r\n    // Branch to address specified by Op1 if the result of the previous instruction is positive (AKA the upper most bit is not active)\r\n    [Opcode.BRP ]: [[GET, GET     ], (s) => {if (!(s.b & s.sign_bit)) s.pc = s.a}],\r\n    // Push Op1 onto the value stack\r\n    [Opcode.PSH ]: [[GET          ], (s) => {s.push(s.a)}],\r\n    // Pop from the value stack into Op1\r\n    [Opcode.POP ]: [[SET          ], (s) => {s.a = s.pop()}],\r\n    // Pushes the address of the next instruction onto the stack then branches to Op1\r\n    [Opcode.CAL ]: [[GET          ], (s) => {s.push(s.pc); s.pc = s.a}],\r\n    // Pops from the stack, then branches to that value\r\n    [Opcode.RET ]: [[             ], (s) => {s.pc = s.pop()}],\r\n    // Stop Execution emediately after opcode is read\r\n    [Opcode.HLT ]: [[             ],() => true],\r\n    // Copies the value located at the RAM location pointed to by Op2 into the RAM position pointed to by Op1.\r\n    [Opcode.CPY ]: [[SAM, GAM     ], (s) => s.m_set(s.a, s.m_get(s.b))],\r\n    // Branch to Op1 if Op2 + Op3 gives a carry out\r\n    [Opcode.BRC ]: [[GET, GET, GET], (s) => {if (s.b + s.c > s.max_value) s.pc = s.a}],\r\n    // Branch to Op1 if Op2 + Op3 does not give a carry out\r\n    [Opcode.BNC ]: [[GET, GET, GET], (s) => {if (s.b + s.c <= s.max_value) s.pc = s.a}],\r\n\r\n    //----- Complex Instructions\r\n    // Multiply Op2 by Op3 then put the lower half of the answer into Op1\r\n    [Opcode.MLT  ]: [[SET, GET, GET], (s) => {s.a = s.b * s.c}],\r\n    // Unsigned division of Op2 by Op3 then put answer into Op1\r\n    [Opcode.DIV  ]: [[SET, GET, GET], (s) => {s.a = s.b / s.c}],\r\n    [Opcode.SDIV  ]: [[SET, GET, GET], (s) => {s.a = s.sb / s.sc}],\r\n    // Unsigned modulus of Op2 by Op3 then put answer into Op1\r\n    [Opcode.MOD  ]: [[SET, GET, GET], (s) => {s.a = s.b % s.c}],\r\n    // Right shift Op2, Op3 times then put result into Op1\r\n    [Opcode.BSR  ]: [[SET, GET, GET], (s) => {s.a = s.b >>> s.c}],\r\n    // Left shift Op2, Op3 times then put result into Op1\r\n    [Opcode.BSL  ]: [[SET, GET, GET], (s) => {s.a = s.b << s.c}],\r\n    // Signed right shift Op2 once then put result into Op1\r\n    [Opcode.SRS  ]: [[SET, GET     ], (s) => {s.a = s.sb >> 1}],\r\n    // Signed right shift Op2, Op3 times then put result into Op1\r\n    [Opcode.BSS  ]: [[SET, GET, GET], (s) => {s.a = s.sb >> s.c}],\r\n    // If Op2 equals Op3 then set Op1 to all ones in binary else set Op1 to 0\r\n    [Opcode.SETE ]: [[SET, GET, GET], (s) => {s.a = s.b === s.c ? s.max_value : 0}],\r\n    // If Op2 is not equal to Op3 then set Op1 to all ones in binary else set Op1 to 0\r\n    [Opcode.SETNE]: [[SET, GET, GET], (s) => {s.a = s.b !== s.c ? s.max_value : 0}],\r\n    // If Op2 if more than Op3 then set Op1 to all ones in binary else set Op1 to 0\r\n    [Opcode.SETG ]: [[SET, GET, GET], (s) => {s.a = s.b > s.c ? s.max_value : 0}],\r\n    [Opcode.SSETG ]: [[SET, GET, GET], (s) => {s.a = s.sb > s.sc ? s.max_value : 0}],\r\n    // If Op2 if less than Op3 then set Op1 to all ones in binary else set Op1 to 0\r\n    [Opcode.SETL ]: [[SET, GET, GET], (s) => {s.a = s.b < s.c ? s.max_value : 0}],\r\n    [Opcode.SSETL ]: [[SET, GET, GET], (s) => {s.a = s.sb < s.sc ? s.max_value : 0}],\r\n    // If Op2 if greater than or equal to Op3 then set Op1 to all ones in binary else set Op1 to 0\r\n    [Opcode.SETGE]: [[SET, GET, GET], (s) => {s.a = s.b >= s.c ? s.max_value : 0}],\r\n    [Opcode.SSETGE]: [[SET, GET, GET], (s) => {s.a = s.sb >= s.sc ? s.max_value : 0}],\r\n    // If Op2 if less than or equal to Op3 then set Op1 to all ones in binary else set Op1 to 0\r\n    [Opcode.SETLE]: [[SET, GET, GET], (s) => {s.a = s.b <= s.c ? s.max_value : 0}],\r\n    [Opcode.SSETLE]: [[SET, GET, GET], (s) => {s.a = s.sb <= s.sc ? s.max_value : 0}],\r\n    // If Op2 + Op3 produces a carry out then set Op1 to all ones in binary, else set Op1 to 0\r\n    [Opcode.SETC ]: [[SET, GET, GET], (s) => {s.a = s.b + s.c > s.max_value ? s.max_value : 0}],\r\n    // If Op2 + Op3 does not produce a carry out then set Op1 to all ones in binary, else set Op1 to 0\r\n    [Opcode.SETNC]: [[SET, GET, GET], (s) => {s.a = s.b + s.c <= s.max_value ? s.max_value : 0}],\r\n    // Copy RAM value pointed to by (Op2 + Op3) into Op1. Where Op2 is the base pointer is Op3 is the offset.\r\n    [Opcode.LLOD ]: [[SET, RAO, GAM], (s) => {s.a = s.m_get(s.b + s.c)}],\r\n    // Copy Op3 into RAM value pointed to by (Op1 + Op2). Where Op1 is the base pointer is Op2 is the offset.\r\n    [Opcode.LSTR ]: [[RAO, SAM, GET], (s) => s.m_set(s.a + s.b, s.c)],\r\n\r\n    //----- IO Instructions\r\n    [Opcode.IN  ]: [[SET, GET], (s) => s.in(s.b)],\r\n    [Opcode.OUT ]: [[GET, GET], (s) => {s.out(s.a, s.b)}],\r\n\r\n    //----- Assert Instructions\r\n    [Opcode.__ASSERT]: [[GET], (s) => {if (!s.a) fail_assert(s, `value = ${s.a}`) }],\r\n    [Opcode.__ASSERT0]: [[GET], (s) => {if (s.a) fail_assert(s, `value = ${s.a}`) }],\r\n    [Opcode.__ASSERT_EQ]: [[GET, GET], (s) => {if (s.a !== s.b) fail_assert(s, `left = ${s.a}, right = ${s.b}`)}],\r\n    [Opcode.__ASSERT_NEQ]: [[GET, GET], (s) => {if (s.a === s.b) fail_assert(s, `left = ${s.a}, right = ${s.b}`)}],\r\n};\r\n\r\nexport const inst_fns: Record<Opcode, Instruction_Callback> \r\n    = object_map(Opcodes_operants, (key, value)=>{\r\n        if (value === undefined){throw new Error(\"instruction definition undefined\");}\r\n        return [key, value?.[1]];\r\n    }, []);\r\n\r\nexport const Opcodes_operant_lengths: Record<Opcode, number> \r\n    = object_map(Opcodes_operants, (key, value) => {\r\n        if (value === undefined){throw new Error(\"instruction definition undefined\");}\r\n        return [key, value[0].length];\r\n    }, []);\r\n\r\n\r\nfunction fail_assert(ctx: Instruction_Ctx, msg: string){\r\n    const message = `Assertion failed: ${msg}`;\r\n    ctx.warn(message);\r\n}\r\n", "import { Emulator } from \"./emulator.js\";\r\nimport { Register, register_count } from \"./instructions.js\";\r\n\r\nexport type i53 = number;\r\nexport type Reg = number;\r\nexport type Word = number;\r\nexport type Ln_Nr = number;\r\n\r\nexport interface Warning {\r\n    line_nr: number,\r\n    message: string\r\n}\r\nexport function warn(line_nr: number, message: string): Warning {\r\n    return {line_nr, message};\r\n}\r\nexport function expand_warnings(warnings: Warning[], lines: string[], file_name?: string): string {\r\n    return warnings.map(w => expand_warning(w, lines, file_name)).join(\"\\n\\n\");\r\n}\r\nexport function expand_warning(warning: Warning, lines: string[], file_name?: string){\r\n    const {message, line_nr} = warning;\r\n    return `${file_name ?? \"urcl\"}:${line_nr+1} - ${message}\\n   ${lines[line_nr]}`;\r\n}\r\n\r\nexport function pad_left(str: string, size: number, char = \" \"){\r\n    const pad = Math.max(0, size - str.length);\r\n    return char.repeat(pad) + str;\r\n}\r\nexport function pad_right(str: string, size: number, char = \" \"){\r\n    const pad = Math.max(0, size - str.length);\r\n    return str + char.repeat(pad);\r\n}\r\nexport function pad_center(str: string, size: number, left_char = \" \", right_char = left_char){\r\n    const pad = Math.max(0, size - str.length);\r\n    const left = 0| pad /2;\r\n    const right = pad - left;\r\n    return left_char.repeat(left) + str + right_char.repeat(right);\r\n}\r\nexport function hex(num: number, size: number, pad=\" \"){\r\n    return pad_left(num.toString(16), size, pad).toUpperCase();\r\n}\r\nexport function hex_size(bits: number){\r\n    return Math.ceil(bits / 4);\r\n}\r\nexport function registers_to_string(emulator: Emulator) {\r\n    const nibbles = hex_size(emulator.bits);\r\n    return Array.from({ length: register_count }, (_,i) => pad_center(Register[i], nibbles) + \" \").join(\"\") +\r\n        Array.from({ length: emulator.registers.length - register_count }, (_, i) => pad_left(`R${i + 1}`, nibbles) + \" \").join(\"\") + \"\\n\" +\r\n        Array.from(emulator.registers, (v)=> hex(v, nibbles) + \" \").join(\"\");\r\n}\r\n\r\nexport function memoryToString(view: Arr, from = 0x0, length = 0x1000, bits = 8) {\r\n    const width = 0x10;\r\n    const end = Math.min(from + length, view.length);\r\n    const hexes = hex_size(bits);\r\n    let lines: string[] = [\r\n        \" \".repeat(hexes) + Array.from({ length: width }, (_, i) => {\r\n            return pad_left(hex(i, 1), hexes);\r\n        }).join(\" \")\r\n    ];\r\n\r\n    for (let i = from; i < end;) {\r\n        const sub_end = Math.min(i + width, end);\r\n        let subs = [];\r\n        const addr = hex(0 | i / width, hexes - 1, \" \");\r\n        for (; i < sub_end; i++) {\r\n            subs.push(hex(view[i], hexes));\r\n        }\r\n        const line = subs.join(\" \");\r\n        lines.push(addr + \" \".repeat(hexes - addr.length) + line);\r\n    }\r\n    return lines.join(\"\\n\");\r\n}\r\n\r\nexport function indent(string: string, spaces: number){\r\n    const left = \" \".repeat(spaces);\r\n    return string.split(\"\\n\").map(line=>left + line).join(\"\\n\")\r\n}\r\n\r\nexport interface Arr<T = number, L extends number = number> {\r\n    [K: number]: T; \r\n    length: L;\r\n    fill(a: number): this\r\n    map(callback: (v: T, i: keyof this, arr:this)=>T): this\r\n    join(sepperator?: string): string;\r\n}\r\nexport function object_map<T, Res extends {}>\r\n(obj: T, callback: (key: keyof T, value: T[keyof T])=>[keyof Res, Res[keyof Res]], target = {})\r\n{\r\n    const res = target as Res\r\n    for (const key in obj){\r\n        const value = obj[key];\r\n        const [new_key, new_value] = callback(key, value);\r\n        res[new_key] = new_value;\r\n    }\r\n    return res;\r\n}\r\n\r\nconst char_code_0 = \"0\".charCodeAt(0);\r\nconst char_code_9 = char_code_0 + 9;\r\nexport function is_digit(str: string, index = 0){\r\n    const char_code = str.charCodeAt(index);\r\n    return char_code >= char_code_0 && char_code <= char_code_9; \r\n}\r\ntype Enum_Obj<T = unknown> = Record<string, T>\r\n\r\nexport function enum_last(enum_obj: Record<string, unknown> ){\r\n    let last = -1;\r\n    for (const key in enum_obj){\r\n        const value = enum_obj[key];\r\n        if (typeof value === \"number\"){\r\n            last = Math.max(last, value);\r\n        }\r\n    }\r\n    return last;\r\n}\r\n\r\nexport function enum_count(enum_obj: Enum_Obj){\r\n    return enum_last(enum_obj) + 1;\r\n}\r\n\r\nexport function enum_strings<T>(enum_obj: Enum_Obj<T>): (T&string)[]\r\n{\r\n    const strings: (T&string)[] = [];\r\n    for (const key in enum_obj){\r\n        const value = enum_obj[key];\r\n        if (typeof value === \"string\"){\r\n            strings.push(value);\r\n        }\r\n    }\r\n    return strings;\r\n}\r\nexport function enum_numbers<T>(enum_obj: Enum_Obj<T>): (T&number)[]\r\n{\r\n    const strings: (T&number)[] = [];\r\n    for (const key in enum_obj){\r\n        const value = enum_obj[key];\r\n        if (typeof value === \"number\"){\r\n            strings.push(value);\r\n        }\r\n    }\r\n    return strings;\r\n}\r\n\r\nexport function enum_from_str<T>\r\n    (enum_obj: Enum_Obj<T>, str: string): undefined | (T & number)\r\n{\r\n    if (is_digit(str)){\r\n        return undefined;\r\n    }\r\n    const value = enum_obj[str];\r\n    return value as T & number;\r\n}\r\n\r\nexport function with_defaults<T>(defaults: T, options: Partial<T>): T {\r\n    const with_defaults = {...defaults};\r\n    for (const name in options){\r\n        if (options[name] !== undefined){\r\n            with_defaults[name] = options[name] as any;\r\n        }\r\n    }\r\n    return with_defaults;\r\n}\r\n\r\nconst conversion_buffer = new DataView(new ArrayBuffer(8)); \r\nexport function f32_decode(int: number){\r\n    conversion_buffer.setInt32(0, int, true);\r\n    return conversion_buffer.getFloat32(0, true);\r\n}\r\nexport function f32_encode(float: number){\r\n    conversion_buffer.setFloat32(0, float, true);\r\n    return conversion_buffer.getInt32(0, true);\r\n}\r\nexport function f16_decode(int: number){\r\n    if (int === 0){return 0;}\r\n    const sign = (int >>> 15) & 1;\r\n    const exponent = (int >>> 10) & 31;\r\n    const fraction = int & 1023;\r\n    const mag = ((fraction/1024) + 1) * 2**(exponent-15);\r\n    return sign ? -mag : mag;\r\n}\r\nexport function f16_encode(float: number){\r\n    const sign = Math.sign(float);\r\n    float *= sign;\r\n    const exponent = Math.floor(Math.log2(float));\r\n    const fraction = (float / 2**exponent) - 1;\r\n    return ((sign < 0 ? 1 : 0) << 15) | (((exponent + 15) & 31) << 10) | ((fraction * 1024) & 1023);\r\n}\r\n\r\nexport function read16(buf: ArrayBufferView, little_endian: boolean, size: number): Uint16Array {\r\n    const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\r\n    const out = new Uint16Array(Math.floor( Math.max(size, buf.byteLength) / 2));\r\n    for (let i = 0; i < Math.floor(buf.byteLength / 2); i++){\r\n        out[i] = view.getUint16(i*2, little_endian);\r\n    }\r\n    return out;\r\n}\r\nexport function read32(buf: ArrayBufferView, littleEndian: boolean, size: number): Uint32Array {\r\n    const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\r\n    const out = new Uint32Array(Math.floor(Math.max(size, buf.byteLength) / 4));\r\n    for (let i = 0; i < Math.floor(buf.byteLength / 4); i++){\r\n        out[i] = view.getUint32(i*4, littleEndian);\r\n    }\r\n    return out;\r\n}\r\n\r\nexport function write16(arr: Uint16Array, little_endian: boolean): Uint8Array {\r\n    const out = new Uint8Array(arr.length*2);\r\n    const view = new DataView(out.buffer, out.byteOffset, out.byteLength);\r\n    for (let i = 0; i < arr.length; i++){\r\n        view.setUint16(i*2, arr[i], little_endian);\r\n    }\r\n    return out;\r\n}\r\nexport function write32(arr: Uint32Array, little_endian: boolean): Uint8Array {\r\n    const out = new Uint8Array(arr.length*4);\r\n    const view = new DataView(out.buffer, out.byteOffset, out.byteLength);\r\n    for (let i = 0; i < arr.length; i++){\r\n        view.setUint32(i*4, arr[i], little_endian);\r\n    }\r\n    return out;\r\n}\r\n\r\nexport function format_int(n: number){\r\n    const base = Math.floor(n).toString();\r\n    let out = \"\";\r\n    let i = base.length;\r\n    out = base.substring(i-3, i)\r\n    for (i-=3; i > 3; i-=3){\r\n        out = base.substring(i-3, i) + \"_\" + out;\r\n        \r\n    }\r\n    if (i > 0){\r\n        out = base.substring(0, i) + \"_\" + out;\r\n    }\r\n    return out;\r\n}\r\n\r\nexport function bound(n: number, min: number, max: number){\r\n    return Math.max(min, Math.min(max, n));\r\n}\r\n", "export function bind<V extends any[], T extends any[], R>(func: (...rest: [...V, ...T]) => R, ...args: V)\r\n    : (...args: T) => R\r\n{\r\n    return (func as any).bind(null, ...args);\r\n}\r\nexport function regex_end(src: string, i: number, regex: RegExp): undefined | number {\r\n    const res = regex.exec(src.substring(i));\r\n    if (res === null || res.index !== 0){return undefined;}\r\n    return i + res[0].length;\r\n}\r\n\r\n\r\nexport interface Token {\r\n    type: Token_Type,\r\n    start: number,\r\n    end: number,\r\n}\r\ninterface Error {\r\n    start: number,\r\n    end: number,\r\n    msg: string,\r\n    cause?: Error,\r\n}\r\n\r\nenum Tok_Code {\r\n    Skip = \"skip\"\r\n}\r\n\r\ntype Tok = (src: string, i: number, tokens: Token[]) => number;\r\ntype Tok_Opt = (src: string, i: number, tokens: Token[]) => Tok_Code.Skip | number;\r\n\r\nfunction or(toks: Tok[], src: string, i: number, tokens: Token[]): number {\r\n    for (const tok of toks){\r\n        const next = tok(src, i, tokens);\r\n        if (next !== i){\r\n            return next;\r\n        }\r\n    }\r\n    return i;\r\n}\r\nfunction and(toks: Tok_Opt[], src: string, i: number, tokens: Token[]): number {\r\n    for (let tok_i = 0; tok_i < toks.length; tok_i++){\r\n        const tok = toks[tok_i];\r\n        const next = tok(src, i, tokens);\r\n        if (next === i){\r\n            return i;\r\n        }\r\n        if (next !== Tok_Code.Skip){\r\n            i = next;\r\n        }\r\n    }\r\n    return i;\r\n}\r\nfunction opt(tok: Tok, src: string, i: number, tokens: Token[]): Tok_Code.Skip | number {\r\n    const end = tok(src, i, tokens);\r\n    return end === i ? Tok_Code.Skip  : end;\r\n}\r\n\r\nfunction list(tok: Tok_Opt, src: string, i: number, tokens: Token[]): number {\r\n    while (i < src.length){\r\n        const next = tok(src, i, tokens);\r\n        if (next === i){\r\n            return i;\r\n        }\r\n        if (next !== Tok_Code.Skip){\r\n            i = next;\r\n        }\r\n    }\r\n    return i;\r\n}\r\nfunction delimit(delimiter: Tok, tok: Tok, src: string, i: number, tokens: Token[]): number {\r\n    while (i < src.length){\r\n        const next = tok(src, i, tokens);\r\n        if (next === i){\r\n            return i;\r\n        }\r\n        i = next;\r\n        const delimit_end = delimiter(src, i, tokens);\r\n        if (delimit_end === i){\r\n            return i;\r\n        }\r\n        i = delimit_end;\r\n    }\r\n    return i;\r\n}\r\n\r\nfunction regex(type: Token_Type, regex: RegExp, src: string, i: number, tokens: Token[]): number {\r\n    const end = regex_end(src, i , regex);\r\n    if (end === undefined){\r\n        return i;\r\n    }\r\n    tokens.push({type, start: i, end});\r\n    return end;\r\n}\r\n\r\nexport enum Token_Type {\r\n    Unknown = \"unknown\",\r\n    Comment = \"comment\",\r\n    Comment_Multi = \"comment-multi\",\r\n    White = \"white\",\r\n    White_inline = \"white-inline\",\r\n    Opcode = \"opcode\",\r\n    DW = \"dw\",\r\n    Square_Open = \"square-open\",\r\n    Square_Close = \"square-close\",\r\n    Number = \"number\",\r\n    Register = \"register\",\r\n    Port = \"port\",\r\n    Memory = \"memory\",\r\n    Escape = \"escape\",\r\n    Quote_String = \"quote-string\",\r\n    Quote_Char = \"quote-char\",\r\n    Text = \"text\",\r\n    Macro = \"macro\",\r\n    Name = \"name\",\r\n    Expansion = \"expansion\",\r\n    Label = \"label\",\r\n    Relative = \"relative\",\r\n    Comparator = \"comparator\"\r\n}\r\n\r\nfunction tok_comment_multi(src: string, i: number, tokens: Token[]): number {\r\n    if (src.substring(i, 2) !== \"/*\"){\r\n        return i;\r\n    }\r\n    const start = i;\r\n    for (i += 2; i < src.length; i++){\r\n        if (src.substring(i, 2) === \"*/\"){\r\n            break;\r\n        }\r\n    }\r\n    const end = Math.min(src.length, i+2);\r\n    tokens.push({type: Token_Type.Comment_Multi, start, end});\r\n    return end;\r\n}\r\nconst tok_comment = bind(regex, Token_Type.Comment, /^\\/\\/[^\\n]*/);\r\nconst tok_white = bind(regex, Token_Type.White, /^\\s+/);\r\nconst tok_white_inline = bind(regex, Token_Type.White_inline, /^(,|[^\\S\\n])+/);\r\nconst tok_number =  bind(regex, Token_Type.Number, /^-?(0x[0-9a-fA-F_]+|0b[01_]+|[0-9_]+)/);\r\nconst tok_register =  bind(regex, Token_Type.Register, /^[Rr$]([0-9_]+|0x[0-9a-fA-F_]+|0b[01_]+)/);\r\nconst tok_port =  bind(regex, Token_Type.Port, /^%\\w+/);\r\nconst tok_memory =  bind(regex, Token_Type.Port, /^[#mM]([0-9_]+|0x[0-9a-fA-F_]+|0b[01_]+)/);\r\nconst tok_escape = bind(regex, Token_Type.Escape, /^\\\\(x[0-9a-fA-F_]+|.)/);\r\nconst tok_char_quote = bind(regex, Token_Type.Quote_Char, /^'/);\r\nconst tok_string_quote = bind(regex, Token_Type.Quote_String, /^\"/);\r\nconst tok_relative = bind(regex, Token_Type.Relative, /^~-?(0x[0-9a-fA-F_]+|0b[01_]+|[0-9_]+)/);\r\nconst tok_label = bind(and, [\r\n    bind(regex, Token_Type.Label, /^\\.\\w+/),\r\n    bind(opt, bind(regex, Token_Type.Number, /\\+\\d+/)),\r\n    bind(list, bind(or, [\r\n        tok_comment, tok_white_inline\r\n    ]))\r\n]);\r\n\r\nconst tok_char = bind(and, [\r\n    tok_char_quote,\r\n    bind(or, [\r\n        tok_escape,\r\n        bind(regex, Token_Type.Text, /^[^'\\\\]/)\r\n    ]),\r\n    tok_char_quote\r\n]);\r\n\r\nconst tok_string = bind(and, [\r\n    tok_string_quote,\r\n    bind(list, bind(or, [\r\n        tok_escape,\r\n        bind(regex, Token_Type.Text, /^[^\"\\\\]+/)\r\n    ])),\r\n    tok_string_quote\r\n]);\r\n\r\nexport const tokenize = bind(list, bind(or, [\r\n    tok_white,\r\n    tok_white_inline,\r\n    bind(regex, Token_Type.Comparator, /^<=|>=|==/),\r\n    bind(regex, Token_Type.Macro, /^BITS|MINREG|MINHEAP|MINSTACK|RUN|HEAP/i),\r\n    bind(regex, Token_Type.Text, /^RAM|ROM/i),\r\n    tok_number,\r\n    tok_char,\r\n    tok_string,\r\n    tok_register,\r\n    tok_port,\r\n    tok_memory,\r\n    tok_label,\r\n    tok_relative,\r\n    tok_comment,\r\n    // tok_comment_multi,\r\n    bind(regex, Token_Type.Square_Open, /\\[/),\r\n    bind(regex, Token_Type.Square_Close, /\\]/),\r\n    bind(regex, Token_Type.Macro, /^@[a-zA-Z_][a-zA-Z_0-9]*/),\r\n    bind(regex, Token_Type.Name, /^[a-zA-Z_][a-zA-Z_0-9]*/),\r\n    bind(regex, Token_Type.Unknown, /^\\S+/),\r\n]));\r\n", "import { pad_left } from \"../emulator/util.js\";\r\nimport { regex_end, Token, tokenize } from \"./tokenizer.js\";\r\n\r\nexport class Editor_Window extends HTMLElement {\r\n    private line_nrs = document.createElement(\"div\")\r\n    private code = document.createElement(\"div\");\r\n    private input = document.createElement(\"textarea\");\r\n    private colors = document.createElement(\"pre\");\r\n    private profile_check = document.createElement(\"input\");\r\n    private profiled: boolean[] = [];\r\n    private profile_present: boolean = false;\r\n    private old_lines: string[] = [];\r\n    tab_width = 4\r\n    constructor(){\r\n        super();\r\n        this.append(this.line_nrs, this.code);\r\n        this.code.append(this.input, this.colors);\r\n\r\n        this.code.style.position = \"relative\";\r\n        this.code.className = \"code\";\r\n        this.colors.className = \"colors\";\r\n        this.line_nrs.className = \"line-nrs\";\r\n        this.input.addEventListener(\"input\", this.input_cb.bind(this));\r\n        this.input.spellcheck = false;\r\n\r\n        this.input.addEventListener(\"keydown\", this.keydown_cb.bind(this));\r\n        this.profile_check.type = \"checkbox\";\r\n        const profile_text = document.createElement(\"span\");\r\n        this.parentElement?.insertBefore(this.profile_check, this);\r\n        profile_text.textContent = `Show line-profile`;\r\n        this.parentElement?.insertBefore(profile_text, this);\r\n    }\r\n    get value(){\r\n        return this.input.value;\r\n    }\r\n    set value(value){\r\n        this.input.value = value;\r\n        this.input_cb()\r\n    }\r\n    private pc_line = 0;\r\n    public set_pc_line(line: number){\r\n        const old = this.line_nrs.children[this.pc_line];\r\n        if (old){\r\n            old.classList.remove(\"pc-line\");\r\n        }\r\n\r\n        const child = this.line_nrs.children[line];\r\n        if (child){\r\n            child.classList.add(\"pc-line\");\r\n        }\r\n        this.pc_line = line;\r\n    }\r\n    public set_line_profile(counts: [number, number][]){\r\n        if (!this.profile_check.checked){\r\n            if (!this.profile_present){\r\n                return;\r\n            }\r\n            this.profile_present = false;\r\n        } \r\n        const children = this.line_nrs.children;\r\n        let last = 0;\r\n        for (const [line_nr, executed] of counts){\r\n            for (; last < line_nr; last++){\r\n                if (this.profiled[last]){\r\n                    const child = children[line_nr];\r\n                    child.textContent = `${last+1}`;\r\n                }\r\n            }\r\n            if (this.profile_check.checked){\r\n                const child = children[line_nr];\r\n                child.textContent = `${executed} ${line_nr+1}`;\r\n            }\r\n        }\r\n    }\r\n    private keydown_cb(event: KeyboardEvent){\r\n        if (event.key === \"Tab\"){\r\n            event.preventDefault();\r\n            let start = this.input.selectionStart;\r\n            let end = this.input.selectionEnd;\r\n            if (!event.shiftKey && start === end){\r\n                const value = this.input.value;\r\n                const line_offset = start - line_start(value, start);\r\n                const add_count = this.tab_width - (line_offset % this.tab_width) || this.tab_width\r\n                this.input.value = str_splice(value, start, 0, \" \".repeat(add_count));\r\n                this.input.selectionStart = this.input.selectionEnd = start + add_count;\r\n            } else {\r\n                let src = this.input.value;\r\n                if (event.shiftKey){\r\n                    foreach_line_selected(src, start, end, (i) => {\r\n                        const white_width = (regex_end(src, i, /^\\s*/) ?? i) - i;\r\n                        const delete_count = white_width === 0 ? 0 : white_width % this.tab_width || this.tab_width;\r\n                        if (i < start){start -= delete_count;}\r\n                        end -= delete_count;\r\n                        src = str_splice(src, i, delete_count, \"\");\r\n                        return src;\r\n                    });\r\n                    this.input.value = src;\r\n                    this.input.selectionStart = start;\r\n                    this.input.selectionEnd = end;\r\n                } else {\r\n                    foreach_line_selected(src, start, end, (i) => {\r\n                        const white_width = (regex_end(src, i, /^\\s*/) ?? i) - i;\r\n                        const add_count = this.tab_width - (white_width % this.tab_width) || this.tab_width;\r\n                        if (i < start){start += add_count;}\r\n                        end += add_count;\r\n                        src = str_splice(src, i, 0, \" \".repeat(add_count));\r\n                        return src;\r\n                    });\r\n                    this.input.value = src;\r\n                    this.input.selectionStart = start;\r\n                    this.input.selectionEnd = end;\r\n                }\r\n            }\r\n            this.input_cb();\r\n        } else if (event.key === \"/\" && event.ctrlKey) {\r\n            let start = this.input.selectionStart;\r\n            let end = this.input.selectionEnd;\r\n            let src = this.input.value;\r\n            foreach_line_selected(src, start, end, (i) => {\r\n                const white_end = regex_end(src, i, /^\\s*/) ?? i;\r\n                if (regex_end(src, white_end, /^\\/\\//) === undefined){\r\n                    src = str_splice(src, white_end, 0, \"// \");\r\n                    if (i < start){start += 3;}\r\n                    end += 3;\r\n                } else {\r\n                    const delete_count = src[white_end + 2] === \" \" ? 3 : 2;\r\n                    src = str_splice(src, white_end, delete_count, \"\");\r\n                    if (i < start){start -= delete_count;}\r\n                    end -= delete_count;\r\n                }\r\n                return src;\r\n            });\r\n            this.input.value = src;\r\n            this.input.selectionStart = start;\r\n            this.input.selectionEnd = end;\r\n            this.input_cb();\r\n        }\r\n    }\r\n    private input_cb(){\r\n        this.input.style.height = \"1px\";\r\n        const height = this.input.scrollHeight;\r\n        this.input.style.width = `${this.input.scrollWidth}px`;\r\n        this.input.style.height = `${height}px`;\r\n        \r\n        const src = this.input.value;\r\n        const old_lines = this.old_lines;\r\n        const lines = src.split(\"\\n\");\r\n        this.old_lines = lines;\r\n        {\r\n            const width = (lines.length+\"\").length\r\n            const start_lines = this.line_nrs.children.length\r\n            const delta_lines = lines.length - start_lines;\r\n            if (delta_lines > 0){\r\n                for (let i = 0; i < delta_lines; i++){\r\n                    const div = this.line_nrs.appendChild(document.createElement(\"div\"));\r\n                    div.textContent = pad_left(\"\"+(start_lines+i+1), width);\r\n                }\r\n            } else {\r\n                for (let i = 0; i < -delta_lines; i++){\r\n                    this.line_nrs.lastChild?.remove()\r\n                }\r\n            }\r\n        }\r\n        \r\n        const max_source_size = 100_000;\r\n        if (src.length > max_source_size){\r\n            this.input.style.color = \"white\";\r\n            this.colors.style.color = \"transparent\";\r\n            this.call_input_listeners();\r\n            return\r\n        } \r\n        this.input.style.color = \"transparent\";\r\n        this.colors.style.display = \"white\";\r\n        const min = Math.min(lines.length, old_lines.length);\r\n        let start = 0;\r\n        for (; start < min && lines[start] === old_lines[start]; start++);\r\n        let end_i = 0;\r\n        \r\n        for (; end_i < min - start && lines.at(-end_i-1) === old_lines.at(-end_i-1); end_i++);\r\n        \r\n        const end = lines.length - end_i;\r\n        const at_end = this.colors.children.item(old_lines.length - end_i);\r\n        \r\n        while (this.colors.children.length < lines.length){\r\n            const elem = document.createElement(\"div\");\r\n            if (at_end){\r\n                this.colors.insertBefore(elem, at_end);\r\n            } else {\r\n                this.colors.appendChild(elem);\r\n            }\r\n        }\r\n        while (this.colors.children.length > lines.length){\r\n            const child = this.colors.children[Math.min(this.colors.children.length, old_lines.length) - end_i - 1];\r\n            if (!child){\r\n                console.error(\"This should never happen\");\r\n                this.input.style.color = \"white\";\r\n                this.colors.style.color = \"transparent\";\r\n                break;\r\n            }\r\n            this.colors.removeChild(child);\r\n        }\r\n\r\n        \r\n\r\n        for (let i = start; i < end; i++){\r\n            const line = lines[i];\r\n            const element = this.colors.children[i];\r\n            const tokens: Token[] = [];\r\n            tokenize(line, 0, tokens);\r\n            if (tokens.length === 0){\r\n                element.innerHTML = \"<span>\\n</span>\";\r\n                continue;\r\n            }\r\n            let span = element.firstElementChild;\r\n            for (const {type, start, end} of tokens){\r\n                if (!span){\r\n                    span = document.createElement(\"span\");\r\n                    element.appendChild(span);\r\n                }\r\n                span.textContent = line.substring(start, end);\r\n                span.className = type;\r\n                span = span.nextElementSibling;\r\n            }\r\n            while (span){\r\n                const next = span.nextElementSibling;\r\n                element.removeChild(span);\r\n                span = next;\r\n            }\r\n        }\r\n\r\n        this.input.style.width = `${this.colors.scrollWidth}px`;\r\n        this.colors.style.height = `${height}px`;\r\n        this.call_input_listeners();\r\n    }\r\n    private call_input_listeners(){\r\n        for (const listener of this.input_listeners){\r\n            listener.call(this, new Event(\"input\"));\r\n        }\r\n    }\r\n\r\n    private input_listeners: ((this: GlobalEventHandlers, event: Event) => void)[] = [];\r\n    set oninput(cb: (this: GlobalEventHandlers, event: Event) => void){\r\n        this.input_listeners.push(cb);\r\n    }\r\n}\r\ncustomElements.define(\"editor-window\", Editor_Window);\r\n\r\nfunction line_starts(src: string): number[] {\r\n    const starts: number[] = [];\r\n    for (let i = 0; i >= 0 && i < src.length; i++){\r\n        starts.push(i);\r\n        const next = src.indexOf(\"\\n\", i);\r\n        i = next >= i ? next: src.length;\r\n    }\r\n    return starts;\r\n}\r\n\r\nfunction str_splice(string: string, index: number, delete_count: number, insert: string){\r\n    return string.slice(0, index) + insert + string.slice(index + delete_count);\r\n}\r\n\r\n\r\nfunction foreach_line_selected(string: string, start: number, end: number, callback: (i: number) => string) {\r\n    const first_line = line_start(string, start);\r\n    let i = string.indexOf(\"\\n\", first_line) + 1 || string.length;\r\n    let line_count = 1;\r\n    for (;i < end; i = string.indexOf(\"\\n\", i) + 1 || string.length){\r\n        line_count++;\r\n    }\r\n    for (let line = 0, i = first_line; line < line_count; line++){\r\n        string = callback(i);\r\n        i = string.indexOf(\"\\n\", i) + 1 || string.length;\r\n    }\r\n    return string;\r\n}\r\n\r\nfunction line_start(string: string, index: number): number {\r\n    let i = 0, line_start = 0;\r\n    for (;i <= index; i = string.indexOf(\"\\n\", i) + 1 || string.length){\r\n        line_start = i;\r\n        if (i >= string.length){\r\n            line_start+1;\r\n            break;\r\n        }\r\n    }\r\n    return line_start;\r\n}\r\n", "import { bound } from \"../emulator/util.js\";\r\n\r\nconst max_size = 1_000_000_000\r\nexport class Scroll_Out extends HTMLElement {\r\n    scroll_div = document.createElement(\"div\");\r\n    content = document.createElement(\"div\");\r\n    char = document.createElement(\"div\");\r\n    cw: number = 8;\r\n    ch: number = 8;\r\n    lines: string[] = [\"\"];\r\n    size = 0;\r\n    constructor(){\r\n        super();\r\n        this.appendChild(this.scroll_div);\r\n        this.scroll_div.appendChild(this.content);\r\n        this.onscroll = ()=>this.update();\r\n        this.onresize = ()=>this.resize();\r\n    \r\n    \r\n        this.char.textContent = \"a\";\r\n        this.char.style.position = \"absolute\";\r\n        this.char.style.visibility = \"hidden\";\r\n        this.appendChild(this.char);\r\n    }\r\n    update(){\r\n        const {ceil: c, floor: f} = Math;\r\n        const {clientWidth: cw, clientHeight: ch} = this.char;\r\n        const x = this.scrollLeft, y = this.scrollTop;\r\n        const w = this.clientWidth, h = this.clientHeight;\r\n\r\n        this.render(f(x/cw), f(y/ch), c((w+1)+1/cw), c((h+2)/ch));\r\n    }\r\n    resize(){\r\n        const {clientWidth: cw, clientHeight: ch} = this.char;\r\n        this.cw = cw; this.ch = ch\r\n        const scroll = this.scrollTop === this.scrollHeight - this.clientHeight;\r\n        const W = this.text_width, H = this.lines.length;\r\n        this.scroll_div.style.height = `${H*ch}px`;\r\n        this.scroll_div.style.width = `${W*cw}px`;\r\n        this.update();\r\n        if (scroll){\r\n            this.scrollTop = this.scrollHeight*2;\r\n        }\r\n        return scroll;\r\n    }\r\n    private buf = \"\";\r\n    private text_width = 0;\r\n    clear(){\r\n        this.buf = \"\"\r\n        this.text_width = 0;\r\n        this.lines = [\"\"];\r\n        this.size = 0;\r\n        this.resize();\r\n    }\r\n    public write(text_to_add: string){\r\n        this.buf += text_to_add;\r\n    }\r\n    public flush(){\r\n        if (this.buf.length === 0){\r\n            return;\r\n        }\r\n        let j = 0;\r\n        for(let i = this.buf.indexOf(\"\\n\") + 1; i > 0; j = i, i = this.buf.indexOf(\"\\n\", i)+1){\r\n            const line = this.buf.substring(j, i-1);\r\n            const full_line = this.lines[this.lines.length-1] += line; \r\n            this.text_width = Math.max(full_line.length, this.text_width);\r\n            this.size += line.length;\r\n            this.lines.push(\"\");\r\n        }\r\n        const full_line = this.lines[this.lines.length-1] += this.buf.substring(j, this.buf.length);\r\n        this.text_width = Math.max(full_line.length, this.text_width);\r\n        this.size += this.buf.length-j;\r\n        this.buf = \"\";\r\n        let i = 0;\r\n        for (; this.size > max_size && i + 1 < this.lines.length; i++){\r\n            this.size -= this.lines[i].length;\r\n        }\r\n        this.lines.splice(0, i);\r\n        if (this.lines.length === 1 && this.lines[0].length > max_size){\r\n            this.lines[0] = this.lines[0].substring(this.lines[0].length - max_size);\r\n            this.size = max_size;\r\n        }\r\n\r\n        if (!this.resize()){\r\n            this.scrollTop -= this.ch * i;\r\n        }\r\n    }\r\n    public render(x: number, y: number, w: number, h: number){\r\n        const W = this.text_width, H = this.lines.length;\r\n        const sx = bound(x, 0, W), ex = bound(x+w, 0, W);\r\n        const sy = bound(y, 0, H), ey = bound(y+h, 0, H);\r\n        this.content.style.top = `${sy*this.ch}px`;\r\n        this.content.style.left = `${sx*this.cw}px`;\r\n        let text = \"\";\r\n        for (let y = sy; y < ey; y++){\r\n            const line = this.lines[y];\r\n            text += line.substring(sx, ex) + \"\\n\";\r\n        }\r\n        this.content.textContent = text;\r\n    }\r\n}\r\n\r\ncustomElements.define(\"scroll-out\", Scroll_Out);\r\n", "import { BreakFlag } from \"./breaks.js\";\r\nimport { Constants, Header_Run, Opcode, Operant_Prim, Operant_Type, register_count, URCL_Header } from \"./instructions.js\";\r\nimport { Header_Obj, Parser_output } from \"./parser.js\";\r\nimport { Arr, Word } from \"./util.js\";\r\n\r\nexport interface Program {\r\n    readonly headers: Header_Obj;\r\n    opcodes: Opcode[];\r\n    operant_prims: Operant_Prim[][];\r\n    operant_values: Word[][];\r\n    data: Word[];\r\n}\r\nexport interface Debug_Info {\r\n    pc_line_nrs: Arr<number>;\r\n    lines: string[];\r\n    file_name?: string;\r\n    program_breaks: Record<number, BreakFlag>;\r\n    memory_breaks: Record<number, BreakFlag>;\r\n    register_breaks: Record<number, BreakFlag>;\r\n    port_breaks: Record<number, BreakFlag>;\r\n}\r\n\r\nexport function compile(parsed: Parser_output): [Program, Debug_Info]\r\n{\r\n    const {headers, opcodes, operant_types, operant_values, instr_line_nrs, lines, register_breaks, program_breaks, data_breaks, heap_breaks, port_breaks} = parsed;\r\n    const in_ram = parsed.headers[URCL_Header.RUN]?.value === Header_Run.RAM;\r\n    const header_bits = parsed.headers[URCL_Header.BITS].value;\r\n    const bits = header_bits <= 8 ? 8 :\r\n        header_bits <= 16 ? 16 :\r\n        header_bits <= 32 ? 32 : undefined;\r\n    if (bits === undefined){\r\n        throw new Error(\"bits can not exceed 32\");\r\n    }\r\n    const msb       = 1 << (bits-1);\r\n    const smsb      = 1 << (bits-2);\r\n    const max       = 0xFF_FF_FF_FF >>> (32 - bits);\r\n    const smax      = max >>> 1;\r\n    const uhalf     = max & (max << (bits/2));\r\n    const lhalf     = max - uhalf;\r\n    const minreg    = headers[URCL_Header.MINREG].value;\r\n    const minheap   = headers[URCL_Header.MINHEAP].value;\r\n    const minstack  = headers[URCL_Header.MINSTACK].value;\r\n\r\n    const heap_offset = parsed.data.length;\r\n\r\n    const new_operant_values = operant_values.map(vals=>vals.slice());\r\n    const new_operant_types = operant_types.map((types, i) => types.map((t, j) => {\r\n        switch (t){\r\n            case Operant_Type.Reg: {\r\n                const num = new_operant_values[i][j] + 1 - register_count;\r\n                if (num > minreg){\r\n                    throw new Error(`register ${num} does not exist, ${num} > minreg:${minreg}`);\r\n                }\r\n                return Operant_Prim.Reg;\r\n            }\r\n            case Operant_Type.Imm: return Operant_Prim.Imm;\r\n            case Operant_Type.Label: return Operant_Prim.Imm;\r\n            case Operant_Type.String: return Operant_Prim.Reg;\r\n            case Operant_Type.Memory: {\r\n                new_operant_values[i][j] += heap_offset;\r\n                return Operant_Prim.Imm;\r\n            }\r\n            case Operant_Type.Data_Label: return Operant_Prim.Imm;\r\n            case Operant_Type.Constant: {\r\n                const vals = new_operant_values[i];\r\n                const constant = vals[j];\r\n                switch (constant){\r\n                    case Constants.BITS: vals[j] = bits; break\r\n                    case Constants.MSB: vals[j] = msb; break\r\n                    case Constants.SMSB: vals[j] = smsb; break\r\n                    case Constants.MAX: vals[j] = max; break\r\n                    case Constants.SMAX: vals[j] = smax; break\r\n                    case Constants.UHALF: vals[j] = uhalf; break\r\n                    case Constants.LHALF: vals[j] = lhalf; break\r\n                    case Constants.MINREG: vals[j] = minreg; break\r\n                    case Constants.MINHEAP: vals[j] = minheap; break\r\n                    case Constants.HEAP: vals[j] = minheap; break\r\n                    case Constants.MINSTACK: vals[j] = minstack; break\r\n                    default: throw new Error(`Unsupported constant ${constant} ${Constants[constant]}`);\r\n                }\r\n                return Operant_Prim.Imm;\r\n            }\r\n            default: throw new Error(`Unkown opperant type ${t} ${Operant_Type[t]}`);\r\n        }\r\n    }));\r\n    const memory_breaks: Record<number, BreakFlag> = {...data_breaks};\r\n    for (const [key, value] of Object.entries(heap_breaks)){\r\n        memory_breaks[Number(key) + heap_offset] = value;\r\n    }\r\n\r\n    return [\r\n        {headers, opcodes, operant_prims: new_operant_types, operant_values: new_operant_values, data: parsed.data},\r\n        {pc_line_nrs: instr_line_nrs, lines, program_breaks, memory_breaks, register_breaks, port_breaks}\r\n    ];\r\n}\r\n\r\n\r\nfunction program_to_bytecode(parsed: Parser_output,  inst_sizeof = (opcode: Opcode) => 5){\r\n    const operant_types = parsed.operant_types;\r\n    const [{headers, opcodes, operant_prims, operant_values, data}, {lines}] = compile(parsed);\r\n    const pc_line_nrs: number[] = [];\r\n    const instr_pc: number[] = [];\r\n    let pc = 0;\r\n    for (let inst_i = 0; inst_i < parsed.opcodes.length; inst_i++){\r\n        pc_line_nrs[pc] = parsed.instr_line_nrs[inst_i];\r\n        instr_pc[inst_i] = pc;\r\n        const opcode = parsed.opcodes[inst_i];\r\n        pc += inst_sizeof(opcode);\r\n    }\r\n    const heap_start = pc;\r\n    for (let inst_i = 0; inst_i < parsed.opcodes.length; inst_i++){\r\n        const types = operant_types[inst_i];\r\n        const value = operant_values[inst_i];\r\n        for (let i = 0; i < types.length; i++){\r\n            switch (types[i]){\r\n                case Operant_Type.Label: value[i] = instr_pc[value[i]]; break;\r\n                case Operant_Type.Memory: value[i] += heap_start; break;\r\n            }\r\n        }\r\n    }\r\n    return [\r\n        {\r\n            headers, opcodes,\r\n            operant_prims,\r\n            operant_values,\r\n            data\r\n        },\r\n        {pc_line_nrs, lines}\r\n    ];\r\n}\r\n", "import { IO_Port } from \"../instructions.js\";\r\nimport { Device } from \"./device.js\";\r\n\r\nexport class Clock implements Device {\r\n    wait_end = 0;\r\n    time_out?: any;\r\n    inputs = {\r\n        [IO_Port.WAIT]: this.wait_in,\r\n    }\r\n    outputs = {\r\n        [IO_Port.WAIT]: this.wait_out,\r\n    }\r\n    wait_out(time: number){\r\n        if (time === 0){\r\n            this.wait_end = -1;\r\n        } else {\r\n            this.wait_end = Date.now() + time;\r\n        }\r\n    }\r\n    wait_in(callback: (value: number)=>void) {\r\n        if (this.wait_end == -1){\r\n            requestAnimationFrame((dt) => callback(dt));\r\n        } else {\r\n            this.time_out = setTimeout(()=>callback(1), this.wait_end - Date.now());\r\n        }\r\n    }\r\n\r\n    reset(){\r\n        this.wait_end = 0;\r\n        if (this.time_out !== undefined){\r\n            clearTimeout(this.time_out);\r\n        }\r\n    }\r\n}\r\n", "import { IO_Port } from \"../instructions.js\";\r\nimport { f32_encode, f32_decode, Word, f16_decode, f16_encode } from \"../util.js\";\r\nimport { Device } from \"./device.js\";\r\n\r\nfunction sepperate(str: string): string {\r\n    let out = \"\";\r\n    const seg_len = 4;\r\n    for (let i = 0; i < str.length; i += seg_len){\r\n        out += \"_\" + str.substring(i, i + seg_len);\r\n    }\r\n    if (out.startsWith(\"_\")){\r\n        out = out.substring(1);\r\n    }\r\n    return out;\r\n}\r\n\r\nexport class Console_IO implements Device {\r\n    bits = 32;\r\n    constructor(\r\n        public input: {\r\n            read: (callback: ()=>void) => void,\r\n            text: string,\r\n        },\r\n        public write: (value: string) => void,\r\n        private _reset: () => void\r\n    ){\r\n    }\r\n    inputs = {\r\n        [IO_Port.TEXT]: this.text_in,\r\n        [IO_Port.NUMB]: this.numb_in,\r\n        [IO_Port.FLOAT]: (cb:(n: number)=>void) => {\r\n            if (this.bits >= 32){\r\n                this.numb_in(cb, s => f32_encode(Number(s)));\r\n            } else if (this.bits >= 16){\r\n                this.numb_in(cb, s => f16_encode(Number(s)));\r\n            } else {\r\n                throw new Error(`8 bit floats are not supported`);\r\n            }\r\n        },\r\n        [IO_Port.FIXED]: (cb:(n: number)=>void) => {\r\n            this.numb_in(cb, s => Math.floor(Number(s) * (2**(this.bits/2))))\r\n        }\r\n    }\r\n    outputs = {\r\n        [IO_Port.TEXT]: this.text_out,\r\n        [IO_Port.NUMB]: this.numb_out,\r\n        [IO_Port.UINT]: this.numb_out,\r\n        [IO_Port.HEX]: (v: number) => this.write(sepperate(v.toString(16).padStart(Math.ceil(this.bits/4), \"0\"))),\r\n        [IO_Port.BIN]: (v: number) => this.write(sepperate(v.toString(2).padStart(this.bits, \"0\"))),\r\n        [IO_Port.FLOAT]: (v: number) => {\r\n            if (this.bits >= 32){\r\n                this.write(f32_decode(v).toString());\r\n            } else if (this.bits >= 16){\r\n                this.write(f16_decode(v).toString());\r\n            } else {\r\n                throw new Error(`8 bit floats are not supported`);\r\n            }\r\n        },\r\n        [IO_Port.FIXED]: (v: number) => {\r\n            this.write((v / (2**(this.bits/2))).toString())\r\n        },\r\n        [IO_Port.INT]: (v: number) => {\r\n            const sign_bit = 2**(this.bits - 1);\r\n            if (v & sign_bit){\r\n                v = (v & (sign_bit-1)) - sign_bit;\r\n            }\r\n            this.write(v.toString());\r\n        },\r\n        // TODO: make specific implementations for these\r\n        [IO_Port.ASCII]: this.text_out,\r\n        [IO_Port.CHAR5]: this.text_out,\r\n        [IO_Port.CHAR6]: this.text_out,\r\n        [IO_Port.ASCII]: this.text_out,\r\n        [IO_Port.UTF8]: this.text_out,\r\n        [IO_Port.UTF16]: this.text_out,\r\n        [IO_Port.UTF32]: this.text_out,\r\n    }\r\n    set_text(text: string){\r\n        this.input.text = text;\r\n    }\r\n    reset(){\r\n        this.input.text = \"\";\r\n        this._reset();\r\n    }\r\n    text_in(callback: (value: Word) => void): undefined | number {\r\n        if (this.input.text.length === 0){\r\n            this.input.read(()=>{\r\n                const char_code = this.input.text.codePointAt(0) ?? this.input.text.charCodeAt(0);\r\n                this.input.text = this.input.text.slice(1);\r\n                callback(char_code);\r\n            });\r\n            return undefined\r\n        }\r\n        const char_code = this.input.text.charCodeAt(0);\r\n        this.input.text = this.input.text.slice(1);\r\n        return char_code;\r\n    }\r\n    text_out(value: Word): void {\r\n        this.write(String.fromCodePoint(value));\r\n    }\r\n    numb_in(callback: (value: Word) => void, parse = parseInt): undefined | number {\r\n        if (this.input.text.length !== 0){\r\n            const num = parse(this.input.text);\r\n            if (!Number.isNaN(num)){\r\n                this.input.text = this.input.text.trimStart().slice(num.toString().length);\r\n                return num;\r\n            }\r\n        }\r\n        this.input.read(()=>{\r\n            const num = this.numb_in(callback, parse);\r\n            if (num !== undefined){\r\n                callback(num);\r\n            }\r\n        });\r\n    }\r\n    numb_out(value: Word): void {\r\n        this.write(\"\"+value);\r\n    }\r\n}\r\n", "import { IO_Port } from \"../instructions.js\";\r\nimport { Device } from \"./device.js\";\r\n\r\nexport enum Color_Mode {\r\n    RGB, Mono, Bin,\r\n    RGB8, RGB16, RGB24,\r\n    RGB6, RGB12,\r\n    PICO8, RGBI\r\n}\r\n\r\nexport const pico8: [number, number, number][] = [\r\n    0x000000, 0x1D2B53, 0x7E2553, 0x008751,\r\n    0xAB5236, 0x5F574F, 0xC2C3C7, 0xFFF1E8,\r\n    0xFF004D, 0xFFA300, 0xFFEC27, 0x00E436,\r\n    0x29ADFF, 0x83769C, 0xFF77A8, 0xFFCCAA,\r\n].map(v=>[(v>>>16)&255, (v>>>8)&255, v&255]);\r\n\r\nexport class Display implements Device {\r\n    private ctx: CanvasRenderingContext2D\r\n    public buffers: ImageData[] = [];\r\n    private image: ImageData;\r\n    private read_buffer: Uint32Array;\r\n    private get data(){\r\n        return this.image.data;\r\n    }\r\n    private buffer_enabled: 1 | 0 = 0;\r\n    private x = 0;\r\n    private y = 0;\r\n\r\n    inputs = {\r\n        [IO_Port.COLOR]: this.color_in,\r\n        [IO_Port.X]: this.x_in,\r\n        [IO_Port.Y]: this.y_in,\r\n        [IO_Port.BUFFER]: this.buffer_in,\r\n    }\r\n    outputs = {\r\n        [IO_Port.COLOR]: this.color_out,\r\n        [IO_Port.X]: this.x_out,\r\n        [IO_Port.Y]: this.y_out,\r\n        [IO_Port.BUFFER]: this.buffer_out,\r\n    }\r\n    reset(){\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.clear();\r\n        this.ctx.putImageData(this.image, 0, 0);\r\n        this.buffer_enabled = 0;\r\n        this.buffers.length = 0;\r\n    }\r\n    \r\n    constructor (\r\n        ctx: CanvasRenderingContext2D,\r\n        public bits: number,\r\n        public color_mode = Color_Mode.Bin,\r\n        public save_buffers = false,\r\n    ){\r\n        const {width, height} = ctx.canvas;\r\n        this.ctx = ctx;\r\n        this.image = ctx.createImageData(width, height);\r\n        this.read_buffer = new Uint32Array(width * height);\r\n    }\r\n    resize(width: number, height: number){\r\n        const ow = this.width, oh = this.height;\r\n        this.image = this.ctx.getImageData(0, 0, width, height);\r\n        this.width = width; this.height = height;\r\n        this.ctx.putImageData(this.image, 0, 0);\r\n        const read_buf = new Uint32Array(width * height);\r\n        for (let y = 0; y < height; y++){\r\n            read_buf.set(this.read_buffer.subarray(y*oh, y*oh + Math.min(width, ow)), y*height);\r\n        }\r\n    }\r\n    clear() {\r\n        for (let i = 0; i < this.data.length; i+=4){\r\n            this.data[i] = 0x00;\r\n            this.data[i+1] = 0x00;\r\n            this.data[i+2] = 0x00;\r\n            this.data[i+3] = 0xff;\r\n        }\r\n    }\r\n    x_in(){\r\n        return this.width;\r\n    }\r\n    y_in(){\r\n        return this.height;\r\n    }\r\n\r\n    x_out(value: number){\r\n        this.x = value;\r\n    }\r\n    y_out(value: number){\r\n        this.y = value;\r\n    }\r\n    color_in(){\r\n        if (!this.in_bounds(this.x, this.y)){\r\n            return 0;\r\n        }\r\n        const i = this.x + this.y * this.width;\r\n        return this.read_buffer[i];\r\n    }\r\n    // rrrgggbb\r\n    // rrrrrggggggbbbbb\r\n    // rrrrrrrrggggggggbbbbbbbb\r\n    color_out(color: number){\r\n        if (!this.in_bounds(this.x, this.y)){\r\n            return;\r\n        }\r\n        const i = this.x + this.y * this.width\r\n        this.data.set(this.short_to_full(color), i * 4);\r\n        this.read_buffer[i] = color;\r\n        if (!this.buffer_enabled){\r\n            this.ctx.putImageData(this.image, 0, 0);\r\n            if (this.save_buffers){\r\n                this.buffers.push(this.ctx.getImageData(0, 0, this.width, this.height));\r\n            }\r\n        }\r\n    }\r\n    buffer_in(): number {\r\n        return this.buffer_enabled;\r\n    }\r\n    buffer_out(value: number){\r\n        switch (value){\r\n            case 0: {\r\n                this.ctx.putImageData(this.image, 0, 0);\r\n                if (this.save_buffers){\r\n                    this.buffers.push(this.ctx.getImageData(0, 0, this.width, this.height));\r\n                }\r\n                this.clear();\r\n                this.buffer_enabled = 0;\r\n            }; break;\r\n            case 1: {\r\n                this.buffer_enabled = 1;\r\n            } break;\r\n            case 2: {\r\n                this.ctx.putImageData(this.image, 0, 0);\r\n                if (this.save_buffers){\r\n                    this.buffers.push(this.ctx.getImageData(0, 0, this.width, this.height));\r\n                }\r\n            } break;\r\n        }\r\n    }\r\n\r\n\r\n    private in_bounds(x: number, y: number){\r\n        return x >= 0 && x < this.width\r\n            && y >= 0 && y < this.height;\r\n    }\r\n    private short_to_full(short: number, color_mode = this.color_mode): [r: number, g: number, b: number]{\r\n        switch (color_mode){\r\n        case Color_Mode.RGB: return this.short_to_full_rgb(short);\r\n        case Color_Mode.RGB6: return this.short_to_full_rgb(short, 6);\r\n        case Color_Mode.RGB8: return this.short_to_full_rgb(short, 8);\r\n        case Color_Mode.RGB12: return this.short_to_full_rgb(short, 12);\r\n        case Color_Mode.RGB16: return this.short_to_full_rgb(short, 16);\r\n        case Color_Mode.RGB24: return this.short_to_full_rgb(short, 24);\r\n        case Color_Mode.RGBI: {\r\n            if ((short & 15) == 1){\r\n                return [64, 64, 64];\r\n            }\r\n            const r = (short >>> 3) & 1;\r\n            const g = (short >>> 2) & 1;\r\n            const b = (short >>> 1) & 1;\r\n            const i = (short >>> 0) & 1;\r\n            return [(r>>i)*127, (g>>i)*127, (b>>i)*127];\r\n        }\r\n        case Color_Mode.Mono: {\r\n            const val = Math.max(0, Math.min(255, short));\r\n            return [val, val, val];\r\n        }\r\n        case Color_Mode.Bin: {\r\n            const value = short > 0 ? 0xff : 0;\r\n            return [value, value, value];\r\n        }\r\n        case Color_Mode.PICO8: {\r\n            return pico8[short&15];\r\n        }\r\n        default: return [0xff, 0x00, 0xff];\r\n        }\r\n    }\r\n    private short_to_full_rgb(short: number, bits = this.bits): [number, number, number] {\r\n        bits = Math.min(24, bits);\r\n        const blue_bits = 0| bits / 3;\r\n        const blue_mask = (1 << blue_bits) - 1;\r\n        const red_bits = 0| (bits - blue_bits) / 2;\r\n        const red_mask = (1 << red_bits) - 1;\r\n        const green_bits = bits - blue_bits - red_bits;\r\n        const green_mask = (1 << green_bits) - 1;\r\n        \r\n        const green_offset = blue_bits;\r\n        const red_offset = green_offset + green_bits;\r\n        return [\r\n            ((short >>> red_offset   ) & red_mask) * 255 / red_mask,\r\n            ((short >>> green_offset ) & green_mask) * 255 / green_mask,\r\n            ((short                  ) & blue_mask) * 255 / blue_mask,\r\n        ];\r\n    }\r\n\r\n    get width(){\r\n        return this.ctx.canvas.width;\r\n    }\r\n    private set width(value: number){\r\n        this.ctx.canvas.width = value;\r\n    }\r\n    get height(){\r\n        return this.ctx.canvas.height;\r\n    }\r\n    private set height(value: number){\r\n        this.ctx.canvas.height = value;\r\n    }\r\n}\r\n", "import { Gamepad_Key, PadI } from \"./gamepad.js\";\r\n\r\n\r\nexport class ControlPad implements PadI {\r\n    xbox_mapping: Record<number, number> = {\r\n        0: 1 << Gamepad_Key.A,\r\n        1: 1 << Gamepad_Key.B,\r\n        8: 1 << Gamepad_Key.SELECT,\r\n        9: 1 << Gamepad_Key.START,\r\n        12: 1 << Gamepad_Key.UP,\r\n        13: 1 << Gamepad_Key.DOWN,\r\n        14: 1 << Gamepad_Key.LEFT,\r\n        15: 1 << Gamepad_Key.RIGHT,\r\n\r\n    }\r\n\r\n    constructor (private gamepad: Gamepad){\r\n    }\r\n    info(index: number): number {\r\n        if (index == 0){\r\n            return 1;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n    cleanup?: (() => void) | undefined;\r\n    private chrome_fix(){\r\n        const gamepad = navigator.getGamepads()[this.gamepad.index];\r\n        if (gamepad !== null){\r\n            this.gamepad = gamepad;\r\n        }\r\n    }\r\n    get buttons(): number {\r\n        this.chrome_fix();\r\n        let value = 0;\r\n        this.gamepad.buttons.forEach((button, i) => {if (button.pressed) {\r\n            value += this.xbox_mapping[i] ?? 0;\r\n        }})\r\n        return value;\r\n    }\r\n    axis(index: number){\r\n        this.chrome_fix();\r\n        const a = this.gamepad.axes[index];\r\n        return a * 127;\r\n    }\r\n}", "import { IO_Port } from \"../instructions.js\";\r\nimport { Device } from \"./device.js\";\r\nimport { ControlPad } from \"./controlpad.js\";\r\n\r\nexport interface PadI {\r\n    readonly buttons: number;\r\n    info(index: number): number;\r\n    axis?: (index: number) => undefined | number;\r\n    cleanup?: () => void;\r\n}\r\n\r\nexport enum Gamepad_Key {\r\n    A, B, SELECT, START, LEFT, RIGHT, UP, DOWN\r\n}\r\n\r\nexport enum Gamepad_Exes {\r\n    LEFT_X, LEFT_Y, RIGHT_X, RIGHT_Y, \r\n}\r\n\r\nexport class Pad implements Device {\r\n    pads: (undefined | PadI)[] = [];\r\n    gamepads = new Map<Gamepad, PadI>();\r\n    selected = 0;\r\n    axis_index = 0;\r\n    info_index = 0;\r\n    constructor (){\r\n        addEventListener(\"gamepadconnected\", this.connect);\r\n        addEventListener(\"gamepaddisconnected\", this.disconnect);\r\n    }\r\n\r\n    cleanup(){\r\n        for (const pad of this.pads){\r\n            pad?.cleanup?.();\r\n        }\r\n        removeEventListener(\"gamepadconnected\", this.connect);\r\n        removeEventListener(\"gamepaddisconnected\", this.disconnect);\r\n    }\r\n\r\n    private connect = (e: GamepadEvent) => {\r\n        const pad = new ControlPad(e.gamepad);\r\n        console.log(pad);\r\n        this.gamepads.set(e.gamepad, pad);\r\n        this.add_pad(pad);\r\n    }\r\n    private disconnect = (e: GamepadEvent) => {\r\n        const pad = this.gamepads.get(e.gamepad);\r\n        if (pad !== undefined){\r\n            this.remove_pad(pad);\r\n            this.gamepads.delete(e.gamepad);\r\n        }\r\n    }\r\n\r\n    add_pad(pad: PadI){\r\n        this.pads.push(pad);\r\n    }\r\n    remove_pad(pad: PadI){\r\n        const index = this.pads.indexOf(pad);\r\n        if (index < 0){return;}\r\n        this.pads[index] = undefined;\r\n    }\r\n\r\n    inputs = {\r\n        [IO_Port.GAMEPAD]: () => this.pads[this.selected]?.buttons ?? 0,\r\n        [IO_Port.AXIS]: () => this.pads[this.selected]?.axis?.(this.axis_index) ?? 0,\r\n        [IO_Port.GAMEPAD_INFO]: () => this.pads[this.selected]?.info(this.info_index) ?? 0\r\n    }\r\n    outputs = {\r\n        [IO_Port.GAMEPAD]: (i: number) => this.selected = i,\r\n        [IO_Port.AXIS]: (i: number) => this.axis_index = i,\r\n    }\r\n}", "type GL = WebGLRenderingContext;\r\nexport function createProgram(gl: GL, vertexSource: string, fragmentSource: string){\r\n  const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vertexSource);\r\n  const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fragmentSource);\r\n\r\n  const program = gl.createProgram();\r\n  if (program == null){\r\n    throw new Error(\"failed to create shader program\");\r\n  }\r\n  gl.attachShader(program, vertexShader);\r\n  gl.attachShader(program, fragmentShader);\r\n\r\n  gl.linkProgram(program);\r\n\r\n  gl.detachShader(program, vertexShader);\r\n  gl.detachShader(program, fragmentShader);\r\n\r\n  gl.deleteShader(vertexShader);\r\n  gl.deleteShader(fragmentShader);\r\n\r\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n    gl.deleteProgram(program);\r\n\r\n    const linkErrLog = gl.getProgramInfoLog(program);\r\n    throw new Error(\"Shader program did not link successfully. \"\r\n    + \"Error log: \" + linkErrLog);\r\n  }\r\n\r\n  return program;\r\n}\r\n\r\nfunction loadShader(gl: GL, type: number, source: string): WebGLShader {\r\n  const shader = gl.createShader(type);\r\n  if (shader == null){\r\n    throw new Error(\"Failed to create shader\");\r\n  }\r\n  gl.shaderSource(shader, source);\r\n\r\n  gl.compileShader(shader);\r\n\r\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n    const info = gl.getShaderInfoLog(shader);\r\n    gl.deleteShader(shader);\r\n    throw new Error(\"Shader compile error: \" + info);\r\n  }\r\n  return shader;\r\n}", "import { createProgram } from \"../../webgl/shader.js\";\r\nimport { IO_Port } from \"../instructions.js\";\r\nimport { Device } from \"./device.js\";\r\nimport { Color_Mode, pico8 } from \"./display.js\";\r\n\r\nexport class Gl_Display implements Device {\r\n    private gl: WebGL2RenderingContext;\r\n    private gl_vertices: WebGLBuffer;\r\n    private gl_indices: WebGLBuffer;\r\n    private gl_texture: WebGLTexture;\r\n    private uni_mode: WebGLUniformLocation;\r\n    // private gl_program: WebGLProgram;\r\n    private buffer: Uint32Array;\r\n    private bytes: Uint8Array;\r\n    private buffer_enabled: 1 | 0 = 0;\r\n    private x = 0;\r\n    private y = 0;\r\n    private pref_display?: HTMLElement | null = globalThis?.document?.getElementById?.(\"pref-display\");\r\n    bits = 8;\r\n\r\n    private vert_src = /*vert*/ `#version 300 es\r\n    precision mediump float;\r\n    in vec2 a_uv;\r\n    in vec2 a_pos;\r\n\r\n    out vec2 v_uv;\r\n\r\n    void main(){\r\n        gl_Position = vec4(a_pos, 0., 1.);\r\n        v_uv = a_uv;\r\n    }\r\n    `;\r\n    private frag_src = /*frag*/`#version 300 es\r\n    precision mediump float;\r\n    in vec2 v_uv;\r\n    out vec4 color;\r\n\r\n    uniform sampler2D u_image;\r\n    uniform uint u_color_mode;\r\n\r\n    vec4 rgb(vec4 v, uint bits){\r\n        uint color = uint(v.x * 255.) + (uint(v.y * 255.) << 8u) + (uint(v.z * 255.) << 16u);\r\n        uint blue_bits = bits / 3u;\r\n        uint blue_mask = (1u << blue_bits) - 1u;\r\n        uint red_bits = (bits - blue_bits) / 2u;\r\n        uint red_mask = (1u << red_bits) - 1u;\r\n        uint green_bits = bits - blue_bits - red_bits;\r\n        uint green_mask = (1u << green_bits) - 1u;\r\n        \r\n        uint green_offset = blue_bits;\r\n        uint red_offset = green_offset + green_bits;\r\n        return vec4(\r\n            float((color >> red_offset   ) & red_mask) / float(red_mask),\r\n            float((color >> green_offset ) & green_mask) / float(green_mask),\r\n            float((color                  ) & blue_mask) / float(blue_mask),\r\n            1\r\n        );\r\n    }\r\n    vec4 rgbi(vec4 v){\r\n        uint c = uint(v.x * 255.);\r\n        uint r = (c >> 3u) & 1u;\r\n        uint g = (c >> 2u) & 1u;\r\n        uint b = (c >> 1u) & 1u;\r\n        uint i = ((c >> 0u) & 1u) + 1u;\r\n        if ((c & 15u) == 1u){\r\n            return vec4(0.25, 0.25, 0.25, 1.);\r\n        }\r\n        return vec4(float(r*i)/2.1, float(g*i)/2.1, float(b*i)/2.1, 1.);\r\n    }\r\n    vec4 pallet_pico8[16] = vec4[16](\r\n        ${pico8.map(v => `vec4(${v.map(n=>(n/255))},1.)`).join(\",\")}\r\n    );\r\n\r\n    vec4 pico8(vec4 v){\r\n        return pallet_pico8[uint(v.x * 255.) & 15u];\r\n    }\r\n\r\n    vec4 mono(vec4 c){\r\n        return vec4(c.x, c.x, c.x, 1);\r\n    }\r\n\r\n    vec4 bin(vec4 c){\r\n        return c.x > 0. || c.y > 0. || c.z > 0. ? vec4(1,1,1,1) : vec4(0,0,0,1);\r\n    }\r\n\r\n\r\n    void main(){\r\n        vec4 c = texture(u_image, v_uv);\r\n        switch (u_color_mode){\r\n            case ${Color_Mode.Bin}u: color = bin(c); break;\r\n            case ${Color_Mode.Mono}u: color = mono(c); break;\r\n            case ${Color_Mode.PICO8}u: color = pico8(c); break;\r\n            case ${Color_Mode.RGB}u: color = rgb(c, 8u); break;\r\n            case ${Color_Mode.RGB6}u: color = rgb(c, 6u); break;\r\n            case ${Color_Mode.RGB8}u: color = rgb(c, 8u); break;\r\n            case ${Color_Mode.RGB12}u: color = rgb(c, 12u); break;\r\n            case ${Color_Mode.RGB16}u: color = rgb(c, 16u); break;\r\n            case ${Color_Mode.RGB24}u: color = rgb(c, 24u); break;\r\n            case ${Color_Mode.RGBI}u: color = rgbi(c); break;\r\n            default: color = pico8(c); break;\r\n        }\r\n    }\r\n    \r\n    `;\r\n\r\n    inputs = {\r\n        [IO_Port.COLOR]: this.color_in,\r\n        [IO_Port.X]: this.x_in,\r\n        [IO_Port.Y]: this.y_in,\r\n        [IO_Port.BUFFER]: this.buffer_in,\r\n    }\r\n    outputs = {\r\n        [IO_Port.COLOR]: this.color_out,\r\n        [IO_Port.X]: this.x_out,\r\n        [IO_Port.Y]: this.y_out,\r\n        [IO_Port.BUFFER]: this.buffer_out,\r\n    }\r\n    reset(){\r\n        this.x = 0;\r\n        this.y = 0;\r\n        this.clear();\r\n        this.buffer_enabled = 0;\r\n    }\r\n    \r\n    constructor (\r\n        gl: WebGL2RenderingContext,\r\n        public color_mode = Color_Mode.PICO8\r\n    ){\r\n        this.gl = gl;\r\n        const {drawingBufferWidth: width, drawingBufferHeight: height} = gl;\r\n        this.buffer = new Uint32Array(width * height);\r\n        this.bytes = new Uint8Array(this.buffer.buffer, 0, this.buffer.byteLength);\r\n\r\n        const gl_program = createProgram(gl, this.vert_src, this.frag_src);\r\n        gl.useProgram(gl_program);\r\n        const attr_pos = gl.getAttribLocation(gl_program, 'a_pos');\r\n        if (attr_pos < 0){\r\n            throw new Error(\"program does not have attribute a_pos\");\r\n        }\r\n        const attr_uv = gl.getAttribLocation(gl_program, 'a_uv');\r\n        if (attr_uv < 0){\r\n            throw new Error(\"program does not have attribute a_uv\");\r\n        }\r\n        const uni_image = gl.getUniformLocation(gl_program, \"u_image\");\r\n        if (uni_image === null){\r\n            throw new Error(\"program does not have uniform u_image\");\r\n        }\r\n        const uni_mode = gl.getUniformLocation(gl_program, \"u_color_mode\");\r\n        if (uni_mode === null){\r\n            throw new Error(\"program does not have uniform u_color_mode\");\r\n        }\r\n        this.uni_mode = uni_mode;\r\n\r\n        gl.enableVertexAttribArray(attr_pos);\r\n        gl.enableVertexAttribArray(attr_uv);\r\n\r\n        \r\n        const gl_vertices = gl.createBuffer();\r\n        if (gl_vertices === null){\r\n            throw new Error(\"unable to create webgl buffer\");\r\n        }\r\n        this.gl_vertices = gl_vertices;\r\n        \r\n        const gl_indices = gl.createBuffer();\r\n        if (gl_indices === null){\r\n            throw new Error(\"unable to create webgl buffer\");\r\n        }\r\n        this.gl_indices = gl_indices;\r\n\r\n        const gl_texture = gl.createTexture();\r\n        if (gl_texture === null){\r\n            throw new Error(\"unable to create webgl texture\");\r\n        }\r\n        this.gl_texture = gl_texture;\r\n        gl.bindTexture(gl.TEXTURE_2D, gl_texture);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, gl_vertices);\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl_indices);\r\n\r\n        gl.vertexAttribPointer(attr_pos, 2, gl.FLOAT, false, 4*4, 0);\r\n        gl.vertexAttribPointer(attr_uv, 2, gl.FLOAT, false, 4*4, 4*2);\r\n\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array([0, 2, 1, 0, 2, 3]), gl.STATIC_DRAW);\r\n        this.init_buffers(width, height);\r\n    }\r\n    resize(width: number, height: number){\r\n        const buffer = new Uint32Array(width * height);\r\n        const mw = Math.min(this.width, width), mh = Math.min(this.height, height);\r\n        for (let y = 0; y < mh; y++){\r\n            for (let x = 0; x < mw; x++){\r\n                const from = x + y * this.width;\r\n                const to = x + y * width;\r\n                buffer[to] = this.buffer[from];\r\n            }\r\n        }\r\n\r\n        this.buffer = buffer;\r\n        this.bytes = new Uint8Array(buffer.buffer, 0, buffer.byteLength);\r\n        this.width = width; this.height = height;\r\n        this.init_buffers(width, height);\r\n        this.update_display();\r\n    }\r\n    clear() {\r\n        this.buffer.fill(0);\r\n    }\r\n    x_in(){\r\n        return this.width;\r\n    }\r\n    y_in(){\r\n        return this.height;\r\n    }\r\n\r\n    x_out(value: number){\r\n        this.x = value;\r\n    }\r\n    y_out(value: number){\r\n        this.y = value;\r\n    }\r\n    color_in(){\r\n        if (!this.in_bounds(this.x, this.y)){\r\n            return 0;\r\n        }\r\n        return this.buffer[this.x + this.y * this.width];\r\n    }\r\n    // rrrgggbb\r\n    // rrrrrggggggbbbbb\r\n    // rrrrrrrrggggggggbbbbbbbb\r\n    color_out(color: number){\r\n        if (!this.in_bounds(this.x, this.y)){\r\n            return;\r\n        }\r\n        this.buffer[this.x + this.y * this.width] = color;\r\n        if (!this.buffer_enabled){\r\n            this.dirty_display();\r\n        }\r\n    }\r\n    buffer_in(): number {\r\n        return this.buffer_enabled;\r\n    }\r\n    start_t = 0;\r\n    buffer_out(value: number){\r\n        switch (value){\r\n            case 0: {\r\n                this.update_display();\r\n                this.clear();\r\n                this.buffer_enabled = 0;\r\n            } break;\r\n            case 1: {\r\n                this.start_t = performance.now();\r\n                this.buffer_enabled = 1;\r\n            } break;\r\n            case 2: {\r\n                this.update_display();\r\n                if (this.pref_display){\r\n                    const end_t = performance.now();\r\n                    const dt = end_t - this.start_t;\r\n                    this.pref_display.innerText = `frame time: ${dt.toFixed(1)}ms`;\r\n                }\r\n                this.start_t = performance.now();\r\n            } break;\r\n        }\r\n    }\r\n\r\n    private init_buffers(width: number, height: number){\r\n        const {gl} = this;\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\r\n            -1, -1,       0, 1,\r\n             1, -1,       1, 1,\r\n             1,  1,       1, 0,\r\n            -1,  1,       0, 0,\r\n        ]), gl.STATIC_DRAW);\r\n        gl.viewport(0, 0, width, height);\r\n    }\r\n\r\n    private dirty_display(){\r\n        this.update_display();\r\n    }\r\n\r\n    update_display(){\r\n        let {gl, width, height, bytes, uni_mode, color_mode, bits} = this;\r\n        if (color_mode === Color_Mode.RGB){\r\n            if (this.bits >= 24){\r\n                color_mode = Color_Mode.RGB24;\r\n            } else if (this.bits >= 16){\r\n                color_mode = Color_Mode.RGB16;\r\n            } else {\r\n                color_mode = Color_Mode.RGB8;\r\n            }\r\n        }\r\n        gl.uniform1ui(uni_mode, color_mode)\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, bytes);\r\n        gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);\r\n    }\r\n\r\n    private in_bounds(x: number, y: number){\r\n        return x >= 0 && x < this.width\r\n            && y >= 0 && y < this.height;\r\n    }\r\n\r\n    get width(){\r\n        return this.gl.canvas.width;\r\n    }\r\n    private set width(value: number){\r\n        this.gl.canvas.width = value;\r\n    }\r\n    get height(){\r\n        return this.gl.canvas.height;\r\n    }\r\n    private set height(value: number){\r\n        this.gl.canvas.height = value;\r\n    }\r\n}\r\n", "import { IO_Port } from \"../instructions.js\";\r\nimport { Device } from \"./device.js\";\r\n\r\nexport class Keyboard implements Device {\r\n    bits: number = 8;\r\n    down: Uint8Array = new Uint8Array(256);\r\n    keymap: Record<string, number> = usb;\r\n    offset: number = 0;\r\n    constructor (){\r\n        addEventListener(\"keydown\", this.onkeydown.bind(this));\r\n        addEventListener(\"keyup\", this.onkeyup.bind(this));\r\n    }\r\n    inputs = {\r\n        [IO_Port.KEY]: () => this.down.slice(this.offset, this.offset + this.bits)\r\n            .reduceRight((acc, v) => (acc << 1) + v, 0),\r\n    }\r\n    outputs = {\r\n        [IO_Port.KEY]: (i: number) => this.offset = i,\r\n    }\r\n    private key(k: string) {\r\n        return this.keymap[k];\r\n    }\r\n    private onkeydown(e: KeyboardEvent){\r\n        const k = this.key(e.code);\r\n        if (k !== undefined){\r\n            this.down[k] = 1;\r\n        }\r\n    }\r\n    private onkeyup(e: KeyboardEvent){\r\n        const k = this.key(e.code);\r\n        if (k !== undefined){\r\n            this.down[k] = 0;\r\n        }\r\n    }\r\n}\r\n\r\nconst digits = {\r\n    Digit1: 1,\r\n    Digit2: 2,\r\n    Digit3: 3,\r\n    Digit4: 4,\r\n    Digit5: 5,\r\n    Digit6: 6,\r\n    Digit7: 7,\r\n    Digit8: 8,\r\n    Digit9: 9,\r\n    Digit0: 10,\r\n}\r\n\r\nconst usb = {\r\nKeyA: 0x04,\r\nKeyB: 0x05,\r\nKeyC: 0x06,\r\nKeyD: 0x07,\r\nKeyE: 0x08,\r\nKeyF: 0x09,\r\nKeyG: 0x0A,\r\nKeyH: 0x0B,\r\nKeyI: 0x0C,\r\nKeyJ: 0x0D,\r\nKeyK: 0x0E,\r\nKeyL: 0x0F,\r\nKeyM: 0x10,\r\nKeyN: 0x11,\r\nKeyO: 0x12,\r\nKeyP: 0x13,\r\nKeyQ: 0x14,\r\nKeyR: 0x15,\r\nKeyS: 0x16,\r\nKeyT: 0x17,\r\nKeyU: 0x18,\r\nKeyV: 0x19,\r\nKeyW: 0x1A,\r\nKeyX: 0x1B,\r\nKeyY: 0x1C,\r\nKeyZ: 0x1D,\r\nDigit1: 0x1E,\r\nDigit2: 0x1F,\r\nDigit3: 0x20,\r\nDigit4: 0x21,\r\nDigit5: 0x22,\r\nDigit6: 0x23,\r\nDigit7: 0x24,\r\nDigit8: 0x25,\r\nDigit9: 0x26,\r\nDigit0: 0x27,\r\nEnter: 0x28,\r\nEscape: 0x29,\r\nBackspace: 0x2A,\r\nTab: 0x2B,\r\nSpace: 0x2C,\r\nMinus: 0x2D,\r\nEqual: 0x2E,\r\nBracketLeft: 0x2F,\r\nBracketRight: 0x30,\r\nBackslash: 0x31,\r\nSemicolon: 0x33,\r\nQuote: 0x34,\r\nBackquote: 0x35,\r\nComma: 0x36,\r\nPeriod: 0x37,\r\nSlash: 0x38,\r\nCapsLock: 0x39,\r\nF1: 0x3A,\r\nF2: 0x3B,\r\nF3: 0x3C,\r\nF4: 0x3D,\r\nF5: 0x3E,\r\nF6: 0x3F,\r\nF7: 0x40,\r\nF8: 0x41,\r\nF9: 0x42,\r\nF10: 0x43,\r\nF11: 0x44,\r\nF12: 0x45,\r\nPrintScreen: 0x46,\r\nScrollLock: 0x47,\r\nPause: 0x48,\r\nInsert: 0x49,\r\nHome: 0x4A,\r\nPageUp: 0x4B,\r\nDelete: 0x4C,\r\nEnd: 0x4D,\r\nPageDown: 0x4E,\r\nArrowRight: 0x4F,\r\nArrowLeft: 0x50,\r\nArrowDown: 0x51,\r\nArrowUp: 0x52,\r\nNumLock: 0x53,\r\nNumpadDivide: 0x54,\r\nNumpadMultiply: 0x55,\r\nNumpadSubtract: 0x56,\r\nNumpadAdd: 0x57,\r\nNumpadEnter: 0x58,\r\nNumpad1: 0x59,\r\nNumpad2: 0x5A,\r\nNumpad3: 0x5B,\r\nNumpad4: 0x5C,\r\nNumpad5: 0x5D,\r\nNumpad6: 0x5E,\r\nNumpad7: 0x5F,\r\nNumpad8: 0x60,\r\nNumpad9: 0x61,\r\nNumpad0: 0x62,\r\nNumpadDecimal: 0x63,\r\nIntlBackslash: 0x64,\r\nPower: 0x66,\r\nNumpadEqual: 0x67,\r\nF13: 0x68,\r\nF14: 0x69,\r\nF15: 0x6A,\r\nF16: 0x6B,\r\nF17: 0x6C,\r\nF18: 0x6D,\r\nF19: 0x6E,\r\nF20: 0x6F,\r\nF21: 0x70,\r\nF22: 0x71,\r\nF23: 0x72,\r\nF24: 0x73,\r\nHelp: 0x75,\r\nContextMenu: 0x76,\r\nProps: 0x76,\r\nSelect: 0x77,\r\nBrowserStop: 0x78,\r\nMediaStop: 0x78,\r\nAgain: 0x79,\r\nUndo: 0x7A,\r\nCopy: 0x7C,\r\nPaste: 0x7D,\r\nFind: 0x7E,\r\nAudioVolumeMute: 0x7F,\r\nVolumeMute: 0x7F,\r\nAudioVolumeUp: 0x80,\r\nAudioVolumeDown: 0x81,\r\nNumpadComma: 0x85,\r\nIntlRo: 0x87,\r\nIntlYen: 0x84,\r\nLang1: 0x90,\r\nHangulMode: 0x90,\r\nLang2: 0x91,\r\nHanja: 0x91,\r\nLang3: 0x92,\r\nLang4: 0x93,\r\nCancel: 0x9B,\r\nNumpadParenLeft: 0xB6,\r\nNumpadParenRight: 0xB7,\r\nControlLeft: 0xE0,\r\nShiftLeft: 0xE1,\r\nAltLeft: 0xE2,\r\nOSLeft: 0xE3,\r\nMetaLeft: 0xE3,\r\nControlRight: 0xE4,\r\nShiftRight: 0xE5,\r\nAltRight: 0xE6,\r\nOSRight: 0xE7,\r\nMetaRight: 0xE7\r\n};", "import { Gamepad_Key, PadI } from \"./gamepad.js\";\r\n\r\ninterface Game_Key {\r\n    pad: number,\r\n    key: Gamepad_Key\r\n}\r\n\r\nexport interface Gamepad_Options {\r\n    keymap?: Record<string, Game_Key>\r\n}\r\n\r\n\r\nconst {A, B, SELECT, START, LEFT, RIGHT, UP, DOWN} = Gamepad_Key;\r\n\r\nfunction k(key: number, pad = 0): Game_Key{\r\n    return {key, pad}; \r\n}\r\n\r\nexport class KeyboardPad implements PadI {\r\n    keymap: Record<string, undefined | Game_Key>;\r\n    buttons = 0;\r\n    constructor (options: Gamepad_Options = {}){\r\n        this.keymap = options.keymap ?? {\r\n            keyk: k(A), keyj: k(B), keyn: k(START), keyv: k(SELECT), keya: k(LEFT), keyd: k(RIGHT), keyw: k(UP), keys: k(DOWN),\r\n        };\r\n        addEventListener(\"keydown\", this.onkeydown);\r\n        addEventListener(\"keyup\", this.onkeyup);\r\n    }\r\n    info(index: number): number {\r\n        if (index == 0){\r\n            return 1;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n    axis?: ((index: number) => number | undefined) | undefined;\r\n\r\n    cleanup(){\r\n        removeEventListener(\"keydown\", this.onkeydown);\r\n        removeEventListener(\"keyup\", this.onkeyup);\r\n    }\r\n    \r\n\r\n    private key(e: KeyboardEvent): Game_Key | undefined {\r\n        return this.keymap[e.code.toLowerCase()]\r\n    }\r\n    private onkeydown = (e: KeyboardEvent) => {\r\n        const k = this.key(e);\r\n        if (k !== undefined){\r\n            this.buttons |= 1 << k.key;\r\n        }\r\n    }\r\n    private onkeyup = (e: KeyboardEvent) => {\r\n        const k = this.key(e);\r\n        if (k !== undefined){\r\n            this.buttons &= ~(1 << k.key);\r\n        }\r\n    }\r\n}", "import { IO_Port } from \"../instructions.js\";\r\nimport { Device } from \"./device.js\";\r\n\r\nexport class Mouse implements Device {\r\n    constructor(private canvas: HTMLCanvasElement){\r\n        addEventListener(\"mousemove\", this.onmove);\r\n        addEventListener(\"mousedown\", this.ondown);\r\n        addEventListener(\"mouseup\", this.onup);\r\n        addEventListener(\"contextmenu\", this.oncontext);\r\n    }\r\n    translate(mousex: number, mousey: number): [number, number] {\r\n        const {x, y, width, height} = this.canvas.getBoundingClientRect();\r\n        return [\r\n            (mousex - x) * this.canvas.width / width,\r\n            (mousey - y) * this.canvas.height / height,\r\n        ];\r\n    }\r\n    x = 0; y = 0;\r\n    lastx = 0; lasty = 0;\r\n    buttons = 0;\r\n    oncontext = (e: MouseEvent) => {\r\n        if (!e.ctrlKey){\r\n            e.preventDefault();\r\n        }\r\n    }\r\n\r\n    onup = (e: MouseEvent) => {\r\n        this.buttons = e.buttons\r\n        if (e.target === this.canvas){\r\n            e.preventDefault();\r\n        }\r\n    };\r\n    ondown = this.onup;\r\n    onmove = (e: MouseEvent) => {\r\n        if (document.pointerLockElement === null){\r\n            [this.x, this.y] = this.translate(e.clientX, e.clientY);\r\n        } else {\r\n            // This might change in the future\r\n            const {width, height} = this.canvas.getBoundingClientRect();\r\n            this.x += e.movementX * this.canvas.width / width;\r\n            this.y += e.movementY * this.canvas.height / height;\r\n        }\r\n    }\r\n    cleanup(){\r\n        removeEventListener(\"mousemove\", this.onmove);\r\n        removeEventListener(\"mouseup\", this.onup);\r\n        removeEventListener(\"mousedown\", this.ondown);\r\n        removeEventListener(\"contextmenu\", this.oncontext);\r\n\r\n    }\r\n    inputs = {\r\n        [IO_Port.MOUSE_X]: () => this.x,\r\n        [IO_Port.MOUSE_Y]: () => this.y,\r\n        [IO_Port.MOUSE_DX]: () => {\r\n            const dx = 0| this.x - this.lastx;\r\n            this.lastx += dx;\r\n            return dx;\r\n        },\r\n        [IO_Port.MOUSE_DY]: () => {\r\n            const dy = 0| this.y - this.lasty;\r\n            this.lasty += dy;\r\n            return dy;\r\n        },\r\n        [IO_Port.MOUSE_BUTTONS]: () => this.buttons,\r\n    }\r\n    outputs = {\r\n        \r\n    }\r\n}", "import { IO_Port } from \"../instructions.js\";\r\nimport { Device } from \"./device.js\";\r\n\r\nexport class RNG implements Device {\r\n    constructor(public bits: number = 8){}\r\n    inputs = {\r\n        [IO_Port.RNG]: () => 0| Math.random() * (0xffff_ffff >>> (32-this.bits))\r\n    };\r\n}", "import { IO_Port } from \"../instructions.js\";\r\nimport { Device } from \"./device.js\";\r\n\r\nconst base_frequency = 92.499;\r\n\r\nconst ramp_up = 0.005;\r\nconst ramp_down = 0.01;\r\n\r\nclass NoteBlock {\r\n    oscillator: OscillatorNode;\r\n    gain: GainNode;\r\n    constructor(private ctx: AudioContext){\r\n        this.oscillator = this.ctx.createOscillator();\r\n        this.gain = this.ctx.createGain()\r\n        this.gain.gain.value = 0\r\n        this.gain.connect(this.ctx.destination);\r\n        this.oscillator.connect(this.gain);\r\n        this.oscillator.type = \"square\";\r\n        this.oscillator.start();\r\n\r\n    }\r\n    play(note: number, length: number, cb: ()=>void){\r\n        if (this.ctx.state === \"suspended\"){\r\n            this.ctx.resume();\r\n        }\r\n        this.oscillator.frequency.value = base_frequency * 2 ** (note/12);\r\n        this.gain.gain.setTargetAtTime(0.1, this.ctx.currentTime, ramp_up);\r\n        this.gain.gain.setTargetAtTime(0, this.ctx.currentTime + length*0.001, ramp_down);\r\n        setTimeout(() => {\r\n            cb();\r\n        }, length*0.1+ramp_down);\r\n    }\r\n}\r\n\r\nexport class Sound implements Device {\r\n    ctx = new AudioContext();\r\n    blocks: NoteBlock[] = [];\r\n    note: number = 0;\r\n    play(note: number, length: number){\r\n        console.log(this.blocks.length, note, length);\r\n        let block = this.blocks.pop();\r\n        if (!block){\r\n            block = new NoteBlock(this.ctx);\r\n        }\r\n        block.play(note, length, () => this.blocks.push(block as NoteBlock));\r\n    }\r\n    constructor(){\r\n    }\r\n\r\n    outputs = {\r\n        [IO_Port.NOTE]: (v: number) => {this.note = v;},\r\n        [IO_Port.NLEG]: (v: number) => {this.play(this.note, v);}\r\n    };\r\n}\r\n", "import { IO_Port } from \"../instructions.js\";\r\nimport { read16, read32, write16, write32 } from \"../util.js\";\r\nimport { Device, Device_Input, Device_Output } from \"./device.js\";\r\n\r\nexport class Storage implements Device {\r\n    constructor(public bits: number, private little_endian: boolean, private size: number){\r\n    }\r\n    public set_bytes(data: ArrayBufferView){\r\n        const {bits, size, little_endian} = this;\r\n        switch (bits){\r\n            case 8: {\r\n                this.address_mask = 0xff;\r\n                this.data = new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\r\n                if (size > this.data.length){\r\n                    const old = this.data;\r\n                    this.data = new Uint8Array(size);\r\n                    this.data.set(old);\r\n                }\r\n            } break;\r\n            case 16: {\r\n                this.address_mask = 0xffff;\r\n                this.data = read16(data, little_endian, size);\r\n            } break;\r\n            case 32: {\r\n                this.address_mask = 0xffffffff;\r\n                this.data = read32(data, little_endian, size);\r\n            } break;\r\n            default: throw new Error(`${bits} is not a supported word length for a Storage device`);\r\n        }\r\n    }\r\n\r\n    public get_bytes(){\r\n        if (this.data instanceof Uint8Array){\r\n            return new Uint8Array(this.data.buffer, this.data.byteOffset, this.data.byteLength);\r\n        } else if (this.data instanceof Uint16Array){\r\n            return write16(this.data, this.little_endian);\r\n        } else if (this.data instanceof Uint32Array){\r\n            return write32(this.data, this.little_endian);\r\n        } else {\r\n            throw new Error(`${this.bits} is not a supported word length for a Storage device`);\r\n        }\r\n    }\r\n    inputs: {[K in IO_Port]?: Device_Input} = {\r\n        [IO_Port.ADDR]: this.address_in,\r\n        [IO_Port.PAGE]: this.page_in,\r\n        [IO_Port.BUS]: this.bus_in,\r\n    }\r\n    outputs: {[K in IO_Port]?: Device_Output} = {\r\n        [IO_Port.ADDR]: this.address_out,\r\n        [IO_Port.PAGE]: this.page_out,\r\n        [IO_Port.BUS]: this.bus_out,\r\n    }\r\n    private data!: Uint8Array | Uint16Array | Uint32Array;\r\n    private address_mask!: number;\r\n    private address = 0;\r\n    address_out(v: number){\r\n        this.address = (this.address & ~this.address_mask) | v;\r\n    }\r\n    address_in(): number {\r\n        return Math.min(2**this.bits, this.data.length - (this.address & ~this.address_mask));\r\n    }\r\n    page_out(v: number){\r\n        this.address = (this.address & this.address_mask) | (v << this.bits);\r\n    }\r\n    page_in(): number {\r\n        return Math.ceil(this.data.length / (2 ** this.bits));\r\n    }\r\n    bus_out(v: number){\r\n        if (this.address > this.data.length){\r\n            throw Error(`Storage address out of bounds ${this.address} > ${this.data.length}`);\r\n        }\r\n        this.data[this.address] = v;\r\n    }\r\n    bus_in(): number{\r\n        if (this.address > this.data.length){\r\n            throw Error(`Storage address out of bounds ${this.address} > ${this.data.length}`);\r\n        }\r\n        return this.data[this.address];\r\n    }\r\n    reset(){\r\n        // console.log(\"storage reset\");\r\n    }\r\n}\r\n", "export enum Break {\r\n    ONREAD = 1, ONWRITE = 2,\r\n}\r\ndeclare const __Break__: unique symbol;\r\nexport type BreakFlag<T extends Break = any> = number & {[__Break__]: T};\r\n\r\nexport function break_flag<T extends Break>(flags: T[]): BreakFlag<T>{\r\n    return flags.reduce((a,b)=>a|b, 0) as any;\r\n}", "import { Word, registers_to_string, indent, hex, pad_center, pad_left } from \"./util.js\";\r\nimport {Opcode, Operant_Operation, Operant_Prim, Opcodes_operants, Instruction_Ctx, URCL_Header, IO_Port, Register, Header_Run, register_count, inst_fns, Opcodes_operant_lengths} from \"./instructions.js\";\r\nimport { Debug_Info, Program } from \"./compiler.js\";\r\nimport { Device, Device_Host, Device_Input, Device_Output, Device_Reset } from \"./devices/device.js\";\r\nimport { Break } from \"./breaks.js\"; \r\n\r\nexport enum Step_Result {\r\n    Continue, Halt, Input, Debug\r\n}\r\ntype WordArray = Uint8Array | Uint16Array | Uint32Array;\r\n\r\ninterface Emu_Options {\r\n    error?: (a: string) => never;\r\n    warn?: (a: string) => void;\r\n    on_continue?: ()=>void;\r\n    max_memory?: ()=>number;\r\n}\r\n\r\nexport class Emulator implements Instruction_Ctx, Device_Host {\r\n    private signed(v: number){\r\n        if (this.bits === 32){\r\n            return 0| v;\r\n        }\r\n        return (v & this.sign_bit) === 0 ? v : v | (0xffff_ffff << this.bits);\r\n    }\r\n    a = 0;\r\n    b = 0;\r\n    c = 0;\r\n    get sa(){return this.signed(this.a);}\r\n    set sa(v: number){this.a = v;}\r\n\r\n    get sb(){return this.signed(this.b);}\r\n    set sb(v: number){this.b = v;}\r\n\r\n    get sc(){return this.signed(this.c);}\r\n    set sc(v: number){this.c = v;}\r\n\r\n    public program!: Program;\r\n    public debug_info!: Debug_Info;\r\n    private _debug_message: undefined | string = undefined;\r\n\r\n    public get_debug_message(){\r\n        const msg = this._debug_message;\r\n        this._debug_message = undefined;\r\n        return msg;\r\n    }\r\n\r\n    constructor(public options: Emu_Options){\r\n\r\n    }\r\n    private heap_size = 0;\r\n    load_program(program: Program, debug_info: Debug_Info){\r\n        this._debug_message = undefined;\r\n        this.program = program, this.debug_info = debug_info;\r\n        this.pc_counters = Array.from({length: program.opcodes.length}, () => 0);\r\n        const bits = program.headers[URCL_Header.BITS].value;\r\n        const static_data = program.data;\r\n        const heap = program.headers[URCL_Header.MINHEAP].value;\r\n        const stack = program.headers[URCL_Header.MINSTACK].value;\r\n        const registers = program.headers[URCL_Header.MINREG].value + register_count;\r\n        const run = program.headers[URCL_Header.RUN].value;\r\n        this.heap_size = heap;\r\n        this.debug_reached = false;\r\n        if (run === Header_Run.RAM){\r\n            throw new Error(\"emulator currently doesn't support running in ram\");\r\n        }\r\n        let WordArray;\r\n        if (bits <= 8){\r\n            WordArray = Uint8Array;\r\n            this.bits = 8;\r\n        } else if (bits <= 16){\r\n            WordArray = Uint16Array;\r\n            this.bits = 16;\r\n        } else if (bits <= 32){\r\n            WordArray = Uint32Array;\r\n            this.bits = 32;\r\n        } else {\r\n            throw new Error(`BITS = ${bits} exceeds 32 bits`);\r\n        }\r\n        if (registers > this.max_size){\r\n            throw new Error(`Too many registers ${registers}, must be <= ${this.max_size}`)\r\n        }\r\n        const memory_size = heap + stack + static_data.length\r\n        if (memory_size > this.max_size){\r\n            throw new Error(`Too much memory heap:${heap} + stack:${stack} + dws:${static_data.length} = ${memory_size}, must be <= ${this.max_size}`);\r\n        }\r\n        const buffer_size = (memory_size + registers) * WordArray.BYTES_PER_ELEMENT;\r\n        if (this.buffer.byteLength < buffer_size){\r\n            this.warn(`resizing Arraybuffer to ${buffer_size} bytes`);\r\n            const max_size = this.options.max_memory?.();\r\n            if (max_size && buffer_size > max_size){\r\n                throw new Error(`Unable to allocate memory for the emulator because\\t\\n${buffer_size} bytes exceeds the maximum of ${max_size}bytes`);\r\n            }\r\n            try {\r\n                this.buffer = new ArrayBuffer(buffer_size);\r\n            } catch (e){\r\n                throw new Error(`Unable to allocate enough memory for the emulator because:\\n\\t${e}`);\r\n            }\r\n        }\r\n\r\n        this.registers = new WordArray(this.buffer, 0, registers).fill(0);\r\n        this.memory = new WordArray(this.buffer, registers * WordArray.BYTES_PER_ELEMENT, memory_size).fill(0);\r\n\r\n        for (let i = 0; i < static_data.length; i++){\r\n            this.memory[i] = static_data[i];\r\n        }\r\n\r\n        this.reset();\r\n        for (const device of this.devices){\r\n            device.bits = bits;\r\n        }\r\n    }\r\n    reset(){\r\n        this.stack_ptr = this.memory.length;\r\n        this.pc = 0;\r\n        this.ins = []; this.outs = [];\r\n        for (const reset of this.device_resets){\r\n            reset();\r\n        }\r\n    }\r\n    shrink_buffer(){\r\n        this.buffer = new ArrayBuffer(1024*1024);\r\n    }\r\n    buffer = new ArrayBuffer(1024*1024);\r\n    registers: WordArray = new Uint8Array(32);\r\n    memory: WordArray = new Uint8Array(256);\r\n    pc_counters: number[] = [];\r\n    // FIXME: if pc is ever set as a register this code will fail\r\n    pc_full = 0;\r\n    get pc(){\r\n        return this.pc_full;\r\n    }\r\n    set pc(value: Word){\r\n        this.registers[Register.PC] = value;\r\n        this.pc_full = value;\r\n    }\r\n    get stack_ptr(){\r\n        return this.registers[Register.SP];\r\n    }\r\n    set stack_ptr(value: Word){\r\n        this.registers[Register.SP] = value;\r\n    }\r\n    bits = 8;\r\n    private device_inputs: {[K in IO_Port]?: Device_Input} = {};\r\n    private device_outputs: {[K in IO_Port]?: Device_Output} = {};\r\n    private device_resets: Device_Reset[] = [];\r\n    private devices: Device[] = []\r\n    public add_io_device(device: Device){\r\n        this.devices.push(device);\r\n        if (device.inputs){\r\n            for (const port in device.inputs){\r\n                const input = device.inputs[port as any as IO_Port] as Device_Input;\r\n                this.device_inputs[port as any as IO_Port] = input.bind(device);\r\n            }\r\n        }\r\n        if (device.outputs){\r\n            for (const port in device.outputs){\r\n                const output = device.outputs[port as any as IO_Port] as Device_Output;\r\n                this.device_outputs[port as any as IO_Port] = output.bind(device);\r\n            }\r\n        }\r\n        if (device.reset){\r\n            this.device_resets.push(device.reset.bind(device));\r\n        }\r\n    }\r\n    \r\n\r\n    get max_value(){\r\n        return 0xff_ff_ff_ff >>> (32 - this.bits);\r\n    }\r\n    get max_size(){\r\n        return this.max_value + 1;\r\n    }\r\n    get max_signed(){\r\n        return (1 << (this.bits-1)) - 1;\r\n    }\r\n    get sign_bit(){\r\n        return (1 << (this.bits-1));\r\n    }\r\n    push(value: Word): void {\r\n        if (this.stack_ptr <= this.heap_size){\r\n            this.error(`Stack overflow: ${this.stack_ptr} <= ${this.heap_size}}`);\r\n        }\r\n        this.memory[--this.stack_ptr] = value;\r\n    }\r\n    pop(): Word { \r\n        if (this.stack_ptr >= this.memory.length){\r\n            this.error(`Stack underflow: ${this.stack_ptr} >= ${this.memory.length}`);\r\n        }\r\n        return this.memory[this.stack_ptr++];\r\n    }\r\n    ins: number[] = [];\r\n    outs: number[] = [];\r\n    in(port: Word): boolean {\r\n    try {\r\n        const device = this.device_inputs[port as IO_Port];\r\n        if (device === undefined){\r\n            if (port === IO_Port.SUPPORTED){\r\n                this.a = this.device_inputs[this.supported as IO_Port] || this.device_outputs[this.supported as IO_Port] || this.supported === IO_Port.SUPPORTED ? 1 : 0;\r\n                return false;\r\n            }\r\n            if (this.ins[port] === undefined){\r\n                this.warn(`unsupported input device port ${port} (${IO_Port[port]})`);\r\n            }\r\n            this.ins[port] = 1;\r\n            return false;\r\n        }\r\n        if (this.debug_info.port_breaks[port] & Break.ONREAD){\r\n            this.debug(`Reading from Port ${port} (${IO_Port[port]})`);\r\n        }\r\n\r\n        const res = device(this.finish_step_in.bind(this, port));\r\n        if (res === undefined){\r\n            if (this.debug_info.port_breaks[port] & Break.ONREAD){\r\n                this.debug(`Read from port ${port} (${IO_Port[port]}) value=${res}`);\r\n            }\r\n            this.pc--;\r\n            return true;\r\n        } else {\r\n            this.a = res;\r\n            if (this.debug_info.port_breaks[port] & Break.ONREAD){\r\n                this.debug(`Read from port ${port} (${IO_Port[port]}) value=${res}`);\r\n            }\r\n            return false;\r\n        }\r\n    } catch (e){\r\n        this.error(\"\"+e);\r\n    }\r\n    }\r\n    supported = 0;\r\n    out(port: Word, value: Word): void{\r\n    try {\r\n        const device = this.device_outputs[port as IO_Port];\r\n        if (device === undefined){\r\n            if (port === IO_Port.SUPPORTED){\r\n                this.supported = value;\r\n                return;\r\n            }\r\n            if (this.outs[port] === undefined){\r\n                this.warn(`unsupported output device port ${port} (${IO_Port[port]}) value=${value}`);\r\n                this.outs[port] = value\r\n            }\r\n            return;\r\n        }\r\n        if (this.debug_info.port_breaks[port] & Break.ONWRITE){\r\n            let char_str = \"\";\r\n            try {\r\n                const char = JSON.stringify(String.fromCodePoint(value));\r\n                char_str = `'${char.substring(1, char.length-1)}'`;\r\n            } catch {}\r\n            this.debug(`Written to port ${port} (${IO_Port[port]}) value=${value} ${char_str}`);\r\n        }\r\n        device(value);\r\n    } catch (e){\r\n        this.error(\"\"+e);\r\n    }\r\n    }\r\n    burst(length: number, max_duration: number): [Step_Result, number]{\r\n        const start_length = length;\r\n        const burst_length = 1024;\r\n        const end = performance.now() + max_duration;\r\n        \r\n        for (;length >= burst_length; length -= burst_length) {\r\n            for (let i = 0; i < burst_length; i++){\r\n                const res = this.step();\r\n                if (res !== Step_Result.Continue){\r\n                    return [res, start_length - length + i + 1];\r\n                }\r\n            }\r\n            \r\n            if (performance.now() > end){\r\n                return [Step_Result.Continue, start_length - length + burst_length]\r\n            }\r\n        }\r\n        for (let i = 0; i < length; i++){\r\n            const res = this.step();\r\n            if (res !== Step_Result.Continue){\r\n                return [res, start_length - length + i + 1];\r\n            }\r\n        }\r\n        return [Step_Result.Continue, start_length];\r\n    }\r\n    run(max_duration: number): [Step_Result, number] {\r\n        const burst_length = 1024;\r\n        const end = performance.now() + max_duration;\r\n        let j = 0;\r\n        do {\r\n            for (let i = 0; i < burst_length; i++){\r\n                const res = this.step();\r\n                if (res !== Step_Result.Continue){\r\n                    return [res, j + i + 1];\r\n                }\r\n            }\r\n            j += burst_length;\r\n        } while (performance.now() < end);\r\n        return [Step_Result.Continue, j];\r\n    }\r\n    private debug_reached = false;\r\nstep(): Step_Result {\r\n    const pc = this.pc++;\r\n    if (this.debug_info.program_breaks[pc] && !this.debug_reached){\r\n        this.debug_reached = true;\r\n        this.debug(`Reached @DEBUG Before:`);\r\n        this.pc--;\r\n        return Step_Result.Debug;\r\n    }\r\n    this.debug_reached = false\r\n    if (pc >= this.program.opcodes.length){return Step_Result.Halt;}\r\n    this.pc_counters[pc]++;\r\n    const opcode = this.program.opcodes[pc];\r\n    if (opcode === Opcode.HLT){\r\n        this.pc--;\r\n        return Step_Result.Halt;\r\n    }\r\n    const [[op], func] = Opcodes_operants[opcode];\r\n    if (func === undefined){this.error(`unkown opcode ${opcode}`);}\r\n\r\n    const op_types = this.program.operant_prims[pc];\r\n    const op_values = this.program.operant_values[pc];\r\n    const length = op_values.length;\r\n    if (length >= 1 && op !== Operant_Operation.SET)this.a = this.read(op_types[0], op_values[0]);\r\n    if (length >= 2)this.b = this.read(op_types[1], op_values[1]);\r\n    if (length >= 3)this.c = this.read(op_types[2], op_values[2]);\r\n    if (func(this)) {\r\n        return Step_Result.Input;\r\n    }\r\n    if (length >= 1 && op === Operant_Operation.SET)this.write(op_types[0], op_values[0], this.a);\r\n\r\n    if (this._debug_message !== undefined){\r\n        return Step_Result.Debug;\r\n    }\r\n\r\n    return Step_Result.Continue;\r\n}\r\n\r\n    m_set(addr: number, value: number){\r\n        if (addr >= this.memory.length){\r\n            this.error(`Heap overflow on store: ${addr} >= ${this.memory.length}`);\r\n        }\r\n        if (this.debug_info.memory_breaks[addr] & Break.ONWRITE){\r\n            this.debug(`Written memory[${addr}] which was ${this.memory[addr]} to ${value}`);\r\n\r\n        }\r\n        this.memory[addr] = value;\r\n    }\r\n    m_get(addr: number){\r\n        if (addr >= this.memory.length){\r\n            this.error(`Heap overflow on load: #${addr} >= ${this.memory.length}`);\r\n        }\r\n        if (this.debug_info.memory_breaks[addr] & Break.ONREAD){\r\n            this.debug(`Read memory[${addr}] = ${this.memory[addr]}`);\r\n        }\r\n        return this.memory[addr];\r\n    }\r\n    // this method only needs to be called for the IN instruction\r\n    finish_step_in(port: number, result: Word){\r\n        const pc = this.pc++;\r\n        const type = this.program.operant_prims[pc][0];\r\n        const value = this.program.operant_values[pc][0];\r\n        this.write(type, value, result);\r\n        this.options.on_continue?.();\r\n    }\r\n    write(target: Operant_Prim, index: Word, value: Word){\r\n        switch (target){\r\n            case Operant_Prim.Reg: {\r\n                if (this.debug_info.register_breaks[index] & Break.ONWRITE){\r\n                    this.debug(`Written r${index - register_count + 1} which was ${this.registers[index]} to ${value}`);\r\n                }\r\n                this.registers[index] = value;\r\n            } return;\r\n            case Operant_Prim.Imm: return; // do nothing\r\n            default: this.error(`Unknown operant target ${target}`);\r\n        }\r\n    }\r\n    read(source: Operant_Prim, index: Word){\r\n        switch (source){\r\n            case Operant_Prim.Imm: return index;\r\n            case Operant_Prim.Reg: {\r\n                if (this.debug_info.register_breaks[index] & Break.ONREAD){\r\n                    this.debug(`Read r${index - register_count + 1} = ${this.registers[index]}`);\r\n                }\r\n                return this.registers[index];\r\n            }\r\n            default: this.error(`Unknown operant source ${source}`); \r\n        }\r\n    }\r\n    error(msg: string): never {\r\n        const {pc_line_nrs, lines, file_name} = this.debug_info;\r\n        const line_nr = pc_line_nrs[this.pc-1];\r\n        const trace = this.decode_memory(this.stack_ptr, this.memory.length, false);\r\n        const content = `${file_name??\"eval\"}:${line_nr + 1} - ERROR - ${msg}\\n    ${lines[line_nr]}\\n\\n${indent(registers_to_string(this), 1)}\\n\\nstack trace:\\n${trace}`;\r\n        if (this.options.error){\r\n            this.options.error(content)\r\n        }\r\n        throw Error(content);\r\n    }\r\n    get_line_nr(pc = this.pc): number {\r\n        return this.debug_info.pc_line_nrs[pc-1] || -2;\r\n    }\r\n    get_line(pc = this.pc): string {\r\n        const line = this.debug_info.lines[this.get_line_nr(pc)];\r\n        if (line == undefined){return \"\";}\r\n        return `\\n\\t${line}`;\r\n    }\r\n    format_message(msg: string, pc = this.pc): string {\r\n        const {lines, file_name} = this.debug_info;\r\n        const line_nr = this.get_line_nr(pc)\r\n        return `${file_name??\"eval\"}:${line_nr + 1} - ${msg}\\n\\t${lines[line_nr] ?? \"\"}`;\r\n    }\r\n\r\n    warn(msg: string): void {\r\n        const content =  this.format_message(`warning - ${msg}`);\r\n        if (this.options.warn){\r\n            this.options.warn(content);\r\n        } else {\r\n            console.warn(content);\r\n        }\r\n    }\r\n    debug(msg: string): void {\r\n        this._debug_message = (this._debug_message ?? \"\") + this.format_message(`debug - ${msg}`) + \"\\n\";  \r\n    }\r\n\r\n    decode_memory(start: number, end: number, reverse: boolean): string {\r\n        const w = 8;\r\n        const headers = [\"hexaddr\", \"hexval\", \"value\", \"*value\", \"linenr\", \"*opcode\"]\r\n        let str = headers.map(v => pad_center(v, w)).join(\"|\");\r\n        let view = this.memory.slice(start, end);\r\n        if (reverse){\r\n            view = view.reverse();\r\n        }\r\n        for (const [i, v] of view.entries()){\r\n            const j = reverse ? end - i : start+i;\r\n            const index = hex(j, w, \" \");\r\n            const h = hex(v, w, \" \");\r\n            const value = pad_left(\"\"+v, w);\r\n            const opcode = pad_left(Opcode[this.program.opcodes[v]] ?? \".\", w);\r\n            const linenr = pad_left(\"\"+(this.debug_info.pc_line_nrs[v] ?? \".\"), w)\r\n            const mem = pad_left(\"\"+(this.memory[v] ?? \".\"), w);\r\n            str += `\\n${index}|${h}|${value}|${mem}|${linenr}|${opcode}`\r\n        }\r\n        return str\r\n    }\r\n}\r\n", "import { Break, BreakFlag, break_flag } from \"./breaks.js\";\r\nimport { Constants, Header_Operant, IO_Port as IO_Port, Opcode, Opcodes_operant_lengths as Opcodes_operant_counts, Operant_Prim, Operant_Type, Register, register_count, URCL_Header, urcl_headers } from \"./instructions.js\";\r\nimport { enum_count, enum_from_str, enum_strings, f16_encode, f32_encode, i53, is_digit, warn, Warning, Word } from \"./util.js\";\r\n\r\nfunction try_parse_int(x: string){\r\n    const int = my_parse_int(x);\r\n    return Number.isInteger(int) ? int : undefined;\r\n}\r\n\r\nfunction my_parse_int(x: string){\r\n    x = x.replace(/\\_/g, \"\");\r\n    if (x.startsWith(\"0b\")){\r\n        return parseInt(x.slice(2), 2);\r\n    }\r\n    return parseInt(x);\r\n}\r\nfunction my_parse_float(x: string){\r\n    x = x.replace(/\\_/g, \"\");\r\n    const float = parseFloat(x);\r\n    if (isNaN(float)){\r\n        return undefined;\r\n    }\r\n    return float;\r\n}\r\nfunction my_parse_f32(x: string){\r\n    x = x.replace(/\\_/g, \"\");\r\n    const float = parseFloat(x);\r\n    if (isNaN(float)){\r\n        return undefined;\r\n    }\r\n    return f32_encode(float);\r\n}\r\n\r\nenum Label_Type {\r\n    Inst, DW\r\n}\r\n\r\ninterface Label {\r\n    type: Label_Type, index: i53\r\n}\r\n\r\ninterface Header_Value {\r\n    value: number,\r\n    line_nr?: number,\r\n    operant?: Header_Operant,\r\n}\r\nexport type Header_Obj = {[K in URCL_Header]: Header_Value};\r\n\r\nexport class Parser_output implements Label_Out, Instruction_Out {\r\n    readonly errors: Warning[] = [];\r\n    readonly warnings: Warning[] = [];\r\n    readonly data: number[] = [];\r\n\r\n    lines                      : string[] = [];\r\n    readonly headers           : Header_Obj = {} as Header_Obj;\r\n    readonly constants         : Record<string, string> = {};\r\n    readonly labels            : Record<string, Label> = {};\r\n    readonly instr_line_nrs    : i53[] = [];\r\n    readonly opcodes           : Opcode[] = [];\r\n    readonly operant_strings   : string[][] = [];\r\n    readonly operant_types     : Operant_Type[][] = [];\r\n    readonly operant_values    : i53[][] = [];\r\n\r\n    readonly register_breaks   : Record<number, BreakFlag> = {};\r\n    readonly data_breaks       : Record<number, BreakFlag> = {};\r\n    readonly heap_breaks     : Record<number, BreakFlag> = {};\r\n    readonly program_breaks    : Record<number, BreakFlag> = {};\r\n    readonly port_breaks       : Record<number, BreakFlag> = {};\r\n}\r\ninterface Label_Out {\r\n    readonly labels            : Record<string, Label>;\r\n}\r\ninterface Instruction_Out {\r\n    readonly headers           : Header_Obj;\r\n    readonly instr_line_nrs    : i53[];\r\n    readonly opcodes           : Opcode[];\r\n    readonly operant_strings   : string[][];\r\n    readonly operant_types     : Operant_Type[][];\r\n    readonly operant_values    : i53[][];\r\n    readonly labels            : Record<string, Label>;\r\n}\r\n\r\ninterface Parse_Options {\r\n    constants?: Record<string, string>\r\n}\r\n\r\nenum Labeled {\r\n    None, INST, DW, Label\r\n}\r\n\r\nexport function parse(source: string, options: Parse_Options = {}): Parser_output\r\n{\r\n    const out = new Parser_output();\r\n    Object.assign(out.constants, options.constants ?? {});\r\n    out.lines = source.split('\\n').map(line => \r\n        line.replace(/,/g, \"\").replace(/\\s+/g, \" \").replace(/\\/\\/.*/g, \"\").trim()\r\n    );\r\n    //TODO: multiline comments\r\n    for (let i = 0; i < enum_count(URCL_Header); i++){\r\n        out.headers[i as URCL_Header] = {value: urcl_headers[i as URCL_Header].def};\r\n        out.headers[i as URCL_Header].operant = urcl_headers[i as URCL_Header].def_operant;\r\n    }\r\n    let label: undefined | Label;\r\n    let last_label: undefined | Label;\r\n    let labeled = Labeled.None as Labeled;\r\n    const inst_is: number[] = [];\r\n    for (let line_nr = 0, inst_i = 0; line_nr < out.lines.length; line_nr++){\r\n        inst_is.push(inst_i);\r\n        const line = out.lines[line_nr];\r\n        if (line === \"\"){continue;};\r\n        last_label = label;\r\n        if (label = parse_label(line, line_nr, inst_i, out, out.warnings)){continue;}\r\n        if (parse_header(line, line_nr, out.headers, out.warnings)){continue;}\r\n        if (split_instruction(line, line_nr, inst_i, out, out.errors)){\r\n            if (last_label && labeled === Labeled.DW){\r\n                out.warnings.push(warn(line_nr, `Label at data->instruction boundary`));\r\n            }\r\n            labeled = Labeled.INST;\r\n            inst_i++; continue;\r\n        }\r\n        if (line.startsWith(\"@\")){\r\n            const [macro, ...parts] = line.split(\" \");\r\n            if (macro.toLowerCase() === \"@define\"){\r\n                if (parts.length < 2){\r\n                    out.warnings.push(warn(line_nr, `Expected 2 arguments for @define macro, got [${parts}]`));\r\n                    continue;\r\n                }\r\n                const [name, value] = parts;\r\n                if (out.constants[name.toUpperCase()] !== undefined){\r\n                    out.warnings.push(warn(line_nr, `Redefinition of macro ${name}`));\r\n                }\r\n                out.constants[name.toUpperCase()] = value;\r\n                continue\r\n            }\r\n            if (macro.toLowerCase() === \"@debug\") {\r\n                continue;\r\n            }\r\n            out.warnings.push(warn(line_nr, `Unknown marco ${macro}`));\r\n            continue\r\n        }\r\n        if (line.toUpperCase().startsWith(\"DW\")){\r\n            let [_, ...value_strs] = line.split(\" \");\r\n            if (value_strs.length > 1){\r\n                if (value_strs[0][0] !== \"[\" || value_strs.at(-1)?.at(-1) !== \"]\"){\r\n                    out.warnings.push(warn(line_nr, `Omitting square brackets around a value list is not standard`));\r\n                }\r\n                value_strs[0] = value_strs[0].replace(\"[\", \"\").trim();\r\n                if (value_strs[0].length === 0){value_strs.shift();}\r\n                value_strs[value_strs.length-1] = value_strs.at(-1)?.replaceAll(\"]\", \"\").trim() ?? \"\";\r\n                if (value_strs.at(-1)?.length === 0){value_strs.pop();}\r\n            }\r\n            if (last_label){\r\n                if (labeled === Labeled.INST){\r\n                    out.warnings.push(warn(line_nr, `Label at instruction->data boundary`));\r\n                }\r\n                last_label.type = Label_Type.DW;\r\n                last_label.index = out.data.length;\r\n            }\r\n            labeled = Labeled.DW;\r\n            let i = 0;\r\n            while (i < value_strs.length){\r\n                const res = parse_operant(()=>value_strs[i++], line_nr, -1, out.labels, out.constants, out.data, [], []);\r\n                if (res?.[0] !== Operant_Type.String){\r\n                    out.data.push(res ? res[1] : -1);\r\n                }\r\n            }\r\n            continue;\r\n        }\r\n        out.errors.push(warn(line_nr, `Unknown identifier ${line.split(\" \")[0]}`));\r\n    }\r\n    out.data.length = 0;\r\n    for (let inst_i = 0; inst_i < out.opcodes.length; inst_i++){\r\n        parse_instructions(out.instr_line_nrs[inst_i], inst_i, out, out.errors, out.warnings);\r\n    }\r\n    for (let line_nr = 0; line_nr < out.lines.length; line_nr++){\r\n        const line = out.lines[line_nr];\r\n        const [start, ...parts] = line.split(\" \"); \r\n        if (start.toUpperCase() === \"DW\"){\r\n            if (parts.length > 1){\r\n                parts[0] = parts[0].replace(\"[\", \"\").trim();\r\n                if (parts[0].length === 0){parts.shift();}\r\n                parts[parts.length-1] = parts.at(-1)?.replaceAll(\"]\", \"\").trim() ?? \"\";\r\n                if (parts.at(-1)?.length === 0){parts.pop();}\r\n            }\r\n            let i = 0;\r\n            while (i < parts.length){\r\n                const res = parse_operant(()=>parts[i++], line_nr, -1, out.labels, out.constants, out.data, out.errors, out.warnings);\r\n                if (res?.[0] !== Operant_Type.String){\r\n                    out.data.push(res ? res[1] : -1);\r\n                }\r\n            }\r\n        }\r\n        if (start.toUpperCase() === \"@DEBUG\"){\r\n            const inst_i = inst_is[line_nr];\r\n            const flag_arr: Break[] = [];\r\n            const targets: string[] = [];\r\n            for (const part of parts){\r\n                const flag = enum_from_str(Break, part);\r\n                if (flag !== undefined){\r\n                    flag_arr.push(flag);\r\n                } else {\r\n                    targets.push(part);\r\n                }\r\n            }\r\n            if (targets.length == 0){\r\n                flag_arr.push(Break.ONREAD);\r\n                out.program_breaks[inst_i] = break_flag(flag_arr);\r\n                continue;\r\n            }\r\n            if (flag_arr.length == 0){\r\n                flag_arr.push(Break.ONREAD, Break.ONWRITE);\r\n            }\r\n            const flags = break_flag(flag_arr);\r\n            for (let i = 0; i < targets.length; i++){\r\n                const target = resolve_macro(targets[i], out.constants, line_nr, out.errors);\r\n                if (target == undefined){\r\n                    continue;\r\n                }\r\n                switch (target[0]){\r\n                    case 'r': case 'R': case '$': {\r\n                        const n = try_parse_int(target.slice(1));\r\n                        if (n === undefined){\r\n                            out.errors.push(warn(line_nr, `${target} is not a valid register`));\r\n                            continue;\r\n                        }\r\n                        out.register_breaks[my_parse_int(target.slice(1)) + register_count - 1] = flags;\r\n                    } break;\r\n                    case 'm': case 'M': case '#': {\r\n                        const [base_str, add_str] = target.slice(1).split(\"+\");\r\n                        let index = try_parse_int(base_str);\r\n                        if (index === undefined){\r\n                            out.errors.push(warn(line_nr, `${base_str} is not a valid integer`));\r\n                            continue;\r\n                        }\r\n                        if (add_str){\r\n                            const add = try_parse_int(add_str);\r\n                            if (add === undefined){\r\n                                out.errors.push(warn(line_nr, `${add_str} is not a valid integer`));\r\n                                continue;\r\n                            }\r\n                            index += add;\r\n                        }\r\n\r\n                        out.heap_breaks[index] = flags;\r\n                    } break;\r\n                    case '.': {\r\n                        const [label_str, add_str] = target.split(\"+\");\r\n                        const label = out.labels[label_str];\r\n                        if (label === undefined){\r\n                            out.errors.push(warn(line_nr, `Undefined label ${label_str}`));\r\n                            continue;\r\n                        }\r\n                        let index = label.index;\r\n                        if (add_str){\r\n                            const add = try_parse_int(add_str);\r\n                            if (add === undefined){\r\n                                out.errors.push(warn(line_nr, `${add_str} is not a valid integer`));\r\n                                continue;\r\n                            }\r\n                            index += add;\r\n                        }\r\n                        if (label.type === Label_Type.DW){\r\n                            out.data_breaks[index] = flags;\r\n                        } else { // label.type === Label_Type.Inst\r\n                            out.program_breaks[index] = flags;\r\n                        }\r\n                    } break;\r\n                    case '%': {\r\n                        const port = resolve_port(target, line_nr, out.errors);\r\n                        if (port === undefined) {\r\n                            continue;\r\n                        }\r\n                        out.port_breaks[port as IO_Port] = flags;\r\n                    } break;\r\n                    default: {\r\n                        if (target.toUpperCase() === \"PC\"){\r\n                            out.register_breaks[Register.PC] = flags;\r\n                            continue;\r\n                        }\r\n                        if (target.toUpperCase() === \"SP\"){\r\n                            out.register_breaks[Register.SP] = flags;\r\n                            continue;\r\n                        }\r\n\r\n                        out.warnings.push(warn(line_nr, `Unknown debug target/flag, expected register, heap location or label or one of [${enum_strings(Break)}]`));\r\n                    } break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return out;\r\n}\r\n\r\n// return whether the line contains a header\r\nfunction parse_header(line: string, line_nr: number, headers: Header_Obj, errors: Warning[]):\r\n    boolean\r\n{\r\n    const [header_str, opOrVal_str, val_str] = line.split(\" \") as (string | undefined)[];\r\n    if (header_str === undefined){\r\n        return false;\r\n    }\r\n    const header = enum_from_str(URCL_Header, header_str.toUpperCase());\r\n    if (header === undefined){\r\n        return false;\r\n    }\r\n    const header_def = urcl_headers[header];\r\n    if (header_def.def_operant !== undefined && val_str){\r\n        if (opOrVal_str === undefined){\r\n            errors.push(warn(line_nr,\r\n                `Missing operant for header ${header_str}, must be ${enum_strings(Header_Operant)}`\r\n            )); \r\n        }\r\n        const operant = enum_from_str(Header_Operant, opOrVal_str||\"\");\r\n        if (operant === undefined && opOrVal_str !== undefined){\r\n            errors.push(warn(line_nr,\r\n                `Unknown operant ${opOrVal_str} for header ${header_str}, must be ${enum_strings(Header_Operant)}`\r\n            )); \r\n        }\r\n        const value= check_value(val_str);\r\n        if (operant !== undefined && value !== undefined){\r\n            headers[header] = {line_nr, operant, value};\r\n        }\r\n    } else {\r\n        let value = check_value(opOrVal_str);\r\n        if (value !== undefined){\r\n            headers[header] = {line_nr, value};\r\n        }\r\n    }\r\n    return true;\r\n\r\n    function check_value(value: string | undefined): number | undefined {\r\n        if (value === undefined){\r\n            errors.push(warn(line_nr, `Missing value for header ${header_str}`));\r\n            return undefined;\r\n        }\r\n        if (header_def.in){\r\n            const num = enum_from_str(header_def.in, value.toUpperCase());\r\n            if (num === undefined){\r\n                errors.push(warn(line_nr, \r\n                    `Value ${value} for header ${header_str} most be one of: ${enum_strings(header_def.in)}`\r\n                ));\r\n                return undefined;\r\n            }\r\n            return num;\r\n        } else {\r\n            const num = my_parse_int(value);\r\n            if (!Number.isInteger(num)){\r\n                errors.push(warn(line_nr,\r\n                    `Value ${value} for header ${header_str} must be an integer`\r\n                ));\r\n                return undefined;\r\n            }\r\n            return num;\r\n        }\r\n    }\r\n}\r\n\r\n// returns whether the line contains a label\r\nfunction parse_label(line: string, line_nr: number, inst_i: number, out: Label_Out, warnings: Warning[]): undefined | Label {\r\n    if (!line.startsWith(\".\")){\r\n        return undefined\r\n    };\r\n    const name = str_until(str_until(line, \" \").slice(0), \"//\");\r\n    if (name === \".\"){\r\n        warnings.push(warn(line_nr, `Empty label`));\r\n    }\r\n    if (out.labels[name] !== undefined){\r\n        warnings.push(warn(line_nr, `Duplicate label ${name}`));\r\n    }\r\n    const label: Label = {type: Label_Type.Inst, index: inst_i};\r\n    out.labels[name] = label;\r\n    return label;\r\n}\r\n\r\n// returns the length of the instruction or 0 if there is an error\r\nfunction split_instruction\r\n(line: string, line_nr: number, inst_i: number, out: Instruction_Out, errors: Warning[]): boolean\r\n{\r\n    const [opcode_str, ...ops] = line\r\n        .replace(/' /g, \"'\\xA0\").replace(/,/g, \"\").split(\" \");\r\n    const opcode = enum_from_str(Opcode, opcode_str.toUpperCase().replace(\"@\", \"__\"));\r\n    if (opcode === undefined){\r\n        return false;\r\n    }\r\n    const operant_count = Opcodes_operant_counts[opcode];\r\n    if (ops.length != operant_count){\r\n        errors.push(warn(line_nr,\r\n            `Expected ${operant_count} operants but got [${ops}] for opcode ${opcode_str}`\r\n        ));\r\n    }\r\n    out.opcodes[inst_i] = opcode;\r\n    out.operant_strings[inst_i] = ops;\r\n    out.instr_line_nrs[inst_i] = line_nr;\r\n    \r\n    return true;\r\n}\r\nfunction parse_instructions(line_nr: number, inst_i: number, out: Parser_output, errors: Warning[], warnings: Warning[]): number {\r\n    const types: number[] = out.operant_types[inst_i] = [];\r\n    const values: number[] = out.operant_values[inst_i] = [];\r\n    let i = 0;\r\n    const strings = out.operant_strings[inst_i];\r\n    while (i < strings.length){\r\n        const [type, value] = parse_operant(()=>strings[i++], line_nr, inst_i, out.labels, out.constants, out.data, errors, warnings) ?? [];\r\n        if (type === Operant_Type.String){\r\n            errors.push(warn(line_nr, \"Strings are not allowed in instructions\"));\r\n        } else if (type !== undefined){\r\n            types.push(type);\r\n            values.push(value as number);\r\n        }\r\n        \r\n    }\r\n    return 0;\r\n}\r\n\r\nfunction resolve_macro(operant: string, macro_constants: Record<string, string>, line_nr: number, errors: Warning[]): string | undefined{\r\n    for (let i = 0; i < 10; i++){\r\n        const macro: undefined | string = macro_constants[operant.toUpperCase()];\r\n        if (macro !== undefined){\r\n            operant = macro;\r\n        } else {\r\n            break;\r\n        }\r\n        if (i >= 9){\r\n            errors.push(warn(line_nr, `Recursive macro (${operant} -> ${macro})`));\r\n            return undefined;\r\n        }\r\n    }\r\n    return operant;\r\n}\r\n\r\nfunction resolve_port(operant: string, line_nr: number, errors: Warning[]): undefined | number {\r\n    let port: undefined | number;\r\n    if (is_digit(operant, 1)){\r\n        port = try_parse_int(operant.slice(1));\r\n        if (port === undefined){\r\n            errors.push(warn(line_nr, `Invalid port number ${operant}`)); return undefined;\r\n        }\r\n    } else {\r\n        port = enum_from_str(IO_Port, operant.slice(1).toUpperCase());\r\n        if (port === undefined){\r\n            errors.push(warn(line_nr, `Unkown port ${operant}`)); return undefined;\r\n        }\r\n    }\r\n    return port;\r\n}\r\n\r\nfunction parse_operant(\r\n    get_operant: ()=> undefined|string, line_nr: number, inst_i: number, labels: {[K in string]?: Label},\r\n    macro_constants: Record<string, string>, data: Word[],\r\n    errors: Warning[], warnings: Warning[]\r\n):\r\n    undefined | [type: Operant_Type, value: Word]\r\n{\r\n    let operant = get_operant() as string;\r\n    if (operant === undefined){\r\n        return undefined;\r\n    }\r\n    for (let i = 0; i < 10; i++){\r\n        const macro = macro_constants[operant.toUpperCase()];\r\n        if (macro !== undefined){\r\n            operant = macro;\r\n        } else {\r\n            break;\r\n        }\r\n        if (i >= 9){\r\n            errors.push(warn(line_nr, `Recursive macro (${operant} -> ${macro})`));\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    switch (operant.toUpperCase()){\r\n        case \"R0\": case \"$0\": return [Operant_Type.Imm, 0];\r\n        case \"PC\": return [Operant_Type.Reg, Register.PC];\r\n        case \"SP\": return [Operant_Type.Reg, Register.SP];\r\n    }\r\n    switch (operant[0]){\r\n        case '.': {\r\n            const label = labels[operant];\r\n            if (label === undefined){\r\n                errors.push(warn(line_nr, `Undefined label ${operant}`)); return undefined; \r\n            }\r\n            const {type, index} = label;\r\n            if (type === Label_Type.Inst){\r\n                return [Operant_Type.Label, index];\r\n            }\r\n            if (type === Label_Type.DW){\r\n                return [Operant_Type.Data_Label, index];\r\n            }\r\n        }\r\n        case '~': {\r\n            const value = my_parse_int(operant.slice(1));\r\n            if (!Number.isInteger(value)){\r\n                errors.push(warn(line_nr, `Invalid relative address ${operant}`)); return undefined;\r\n            }\r\n            return [Operant_Type.Label, value + inst_i];\r\n        }\r\n        case 'R': case 'r': case '$': {\r\n            const value = my_parse_int(operant.slice(1));\r\n            if (!Number.isInteger(value)){\r\n                errors.push(warn(line_nr, `Invalid register ${operant}`)); return undefined;\r\n            }\r\n            return [Operant_Type.Reg, value + register_count-1];\r\n        }\r\n        case 'M': case 'm': case '#': {\r\n            const value = my_parse_int(operant.slice(1));\r\n            if (!Number.isInteger(value)){\r\n                errors.push(warn(line_nr, `Invalid memory address ${operant}`)); return undefined;\r\n            }\r\n            return [Operant_Type.Memory, value];\r\n        }\r\n        case '%': {\r\n            const port = resolve_port(operant, line_nr, errors) ?? NaN;\r\n            return [Operant_Type.Imm, port];\r\n        }\r\n        case '\\'': {\r\n            let char_lit;\r\n            if (operant.length === 1){\r\n                operant += \" \" + get_operant() ?? \"\";\r\n            }\r\n            try {\r\n                char_lit = JSON.parse(operant.replace(/\"/g, \"\\\\\\\"\").replace(/'/g, '\"')) as string;\r\n            } catch (e) {\r\n                errors.push(warn(line_nr, `Invalid character ${operant}\\n  ${e}`));\r\n                return undefined;\r\n            }\r\n            return [Operant_Type.Imm, char_lit.codePointAt(0) ?? char_lit.charCodeAt(0)];\r\n        }\r\n        case '\"': {\r\n            let i = 1;\r\n            const value = data.length;\r\n            while (true){\r\n                i = operant.indexOf('\"', 1);\r\n                if (i > 0 && operant[i-1] !== \"\\\\\" || operant[i-2] === \"\\\\\"){\r\n                    let string = \"\";\r\n                    try {\r\n                        string = JSON.parse(operant) as string;\r\n                    } catch (e) {\r\n                        errors.push(warn(line_nr, `Invalid string ${operant}\\n  ${e}`));\r\n                        return undefined;\r\n                    }\r\n                    for (let i = 0; i < string.length; i++){\r\n                        data.push(string.codePointAt(i) ?? 0);\r\n                    }\r\n                    return [Operant_Type.String, value];\r\n                }\r\n                const next = get_operant();\r\n                if (next === undefined){\r\n                    errors.push(warn(line_nr, `missing end of string`));\r\n                    return [Operant_Type.String, value];\r\n                }\r\n                operant += \" \" + next; \r\n            }\r\n        }\r\n        case '&': warnings.push(warn(line_nr, `Compiler constants with & are deprecated`));\r\n        case '@': {\r\n            const constant = enum_from_str(Constants, operant.slice(1).toUpperCase());\r\n            if (constant === undefined){\r\n                errors.push(warn(line_nr, `Unkown Compiler Constant ${operant}`));\r\n                return undefined;\r\n            }\r\n            return [Operant_Type.Constant, constant];\r\n        }\r\n        default: {\r\n            if (operant.endsWith(\"f32\")){\r\n                const value = my_parse_f32(operant);\r\n                if (value === undefined){\r\n                    errors.push(warn(line_nr, `Invalid immediate float ${operant}`)); return undefined;\r\n                }\r\n                return [Operant_Type.Imm, value];\r\n            } else if (operant.endsWith(\"f16\")){\r\n                const value = my_parse_float(operant);\r\n                if (value === undefined){\r\n                    errors.push(warn(line_nr, `Invalid immediate float ${operant}`)); return undefined;\r\n                }\r\n                return [Operant_Type.Imm, f16_encode(value)];\r\n            } else {\r\n                const value = my_parse_int(operant);\r\n                if (!Number.isInteger(value)){\r\n                    errors.push(warn(line_nr, `Invalid immediate int ${operant}`)); return undefined;\r\n                }\r\n                return [Operant_Type.Imm, value];\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction str_until(string: string, sub_string: string){\r\n    const end = string.indexOf(sub_string);\r\n    if (end < 0){return string;}\r\n    return string.slice(0, end);\r\n}\r\n", "import \"./editor/editor.js\";\r\nimport \"./scroll-out/scroll-out.js\";\r\n\r\nimport { Editor_Window } from \"./editor/editor.js\";\r\nimport { compile } from \"./emulator/compiler.js\";\r\nimport { Clock } from \"./emulator/devices/clock.js\";\r\nimport { Console_IO } from \"./emulator/devices/console-io.js\";\r\nimport { Color_Mode, Display } from \"./emulator/devices/display.js\";\r\nimport { Gamepad_Key, Gamepad_Exes, Pad } from \"./emulator/devices/gamepad.js\";\r\nimport { Gl_Display } from \"./emulator/devices/gl-display.js\";\r\nimport { Keyboard } from \"./emulator/devices/keyboard.js\";\r\nimport { KeyboardPad } from \"./emulator/devices/keyboardpad.js\";\r\nimport { Mouse } from \"./emulator/devices/mouse.js\";\r\nimport { RNG } from \"./emulator/devices/rng.js\";\r\nimport { Sound } from \"./emulator/devices/sound.js\";\r\nimport { Storage } from \"./emulator/devices/storage.js\";\r\nimport { Emulator, Step_Result } from \"./emulator/emulator.js\";\r\nimport { parse } from \"./emulator/parser.js\";\r\nimport { Arr, enum_from_str, enum_strings, expand_warning, registers_to_string, memoryToString, format_int } from \"./emulator/util.js\";\r\nimport { Scroll_Out } from \"./scroll-out/scroll-out.js\";\r\n\r\nlet animation_frame: number | undefined;\r\nlet running = false;\r\nlet started = false;\r\nlet input = false;\r\nlet last_step = performance.now();\r\nlet clock_speed = 0;\r\nlet clock_count = 0;\r\n\r\nconst source_input = document.getElementById(\"urcl-source\") as Editor_Window;\r\nconst output_element = document.getElementById(\"output\") as HTMLElement;\r\nconst debug_output_element = document.getElementById(\"debug-output\") as HTMLElement;\r\nconst memory_view = document.getElementById(\"memory-view\") as HTMLElement;\r\nconst register_view = document.getElementById(\"register-view\") as HTMLElement;\r\n\r\nconst console_input = document.getElementById(\"stdin\") as HTMLTextAreaElement;\r\nconst console_output = document.getElementById(\"stdout\") as Scroll_Out;\r\nconst null_terminate_input = document.getElementById(\"null-terminate\") as HTMLInputElement;\r\nconst share_button = document.getElementById(\"share-button\") as HTMLButtonElement;\r\nconst auto_run_input = document.getElementById(\"auto-run-input\") as HTMLInputElement;\r\nconst storage_input = document.getElementById(\"storage-input\") as HTMLInputElement;\r\nconst storage_msg = document.getElementById(\"storage-msg\") as HTMLInputElement;\r\nconst storage_little = document.getElementById(\"storage-little\") as HTMLInputElement;\r\nconst storage_update = document.getElementById(\"storage-update\") as HTMLInputElement;\r\nconst storage_download = document.getElementById(\"storage-download\") as HTMLInputElement;\r\nconst clock_speed_input = document.getElementById(\"clock-speed-input\") as HTMLInputElement;\r\nconst clock_speed_output = document.getElementById(\"clock-speed-output\") as HTMLInputElement;\r\n\r\nconst memory_update_input = document.getElementById(\"update-mem-input\") as HTMLInputElement;\r\n\r\nconst url = new URL(location.href, location.origin)\r\nconst srcurl = url.searchParams.get(\"srcurl\");\r\nconst storage_url = url.searchParams.get(\"storage\");\r\nconst width = parseInt(url.searchParams.get(\"width\") ?? \"\");\r\nconst height = parseInt(url.searchParams.get(\"height\") ?? \"\");\r\nconst color = enum_from_str(Color_Mode, url.searchParams.get(\"color\") ?? \"\")\r\n\r\nmemory_update_input.oninput = () => update_views();\r\n\r\nconst max_clock_speed = 40_000_000;\r\nconst max_its = 1.2 * max_clock_speed / 16;\r\nclock_speed_input.oninput = change_clockspeed\r\nfunction change_clockspeed() {\r\n    clock_speed = Math.min(max_clock_speed, Math.max(0, Number(clock_speed_input.value) || 0));\r\n    clock_speed_output.value = \"\"+clock_speed;\r\n    last_step = performance.now();\r\n}\r\nchange_clockspeed();\r\n\r\nshare_button.onclick = e => {\r\n    const srcurl = `data:text/plain;base64,${btoa(source_input.value)}`;\r\n    const share = new URL(location.href);\r\n    share.searchParams.set(\"srcurl\", srcurl);\r\n    share.searchParams.set(\"width\", \"\"+canvas.width);\r\n    share.searchParams.set(\"height\", \"\"+canvas.height);\r\n    share.searchParams.set(\"color\", Color_Mode[display.color_mode]);\r\n    navigator.clipboard.writeText(share.href);\r\n}\r\n\r\nlet storage_uploaded: undefined | Uint8Array;\r\nlet storage_device: undefined | Storage;\r\nlet storage_loads = 0;\r\n\r\nfunction load_array_buffer(buffer: ArrayBuffer) {\r\n    storage_uploaded = new Uint8Array(buffer);\r\n    const bytes = storage_uploaded.slice();\r\n    emulator.add_io_device(storage_device = new Storage(emulator.bits, storage_little.checked, bytes.length));\r\n    storage_device.set_bytes(bytes);\r\n    storage_msg.innerText = `loaded storage device with ${0| bytes.length / (emulator.bits / 8)} words`;\r\n}\r\n\r\nstorage_little.oninput =\r\nstorage_input.oninput = async e => {\r\n    storage_msg.classList.remove(\"error\");\r\n    const files = storage_input.files;\r\n    if (files === null || files.length < 1){\r\n        storage_msg.classList.add(\"error\");\r\n        storage_msg.innerText = \"No file specified\";\r\n        return;\r\n    }\r\n    const file = files[0];\r\n    try {\r\n        load_array_buffer(await file.arrayBuffer());\r\n    } catch (error: any) {\r\n        storage_msg.classList.add(\"error\");\r\n        storage_msg.innerText = \"\"+error;\r\n    }\r\n}\r\nstorage_update.onclick = e => {\r\n    if (storage_device === undefined){\r\n        storage_msg.innerText = `No storage to update`;\r\n        return;\r\n    }\r\n    storage_uploaded = storage_device.get_bytes();\r\n    storage_msg.innerText = `Updated storage`;\r\n}\r\n\r\nstorage_download.onclick = e => {\r\n    if (storage_device === undefined && storage_uploaded === undefined){\r\n        storage_msg.innerText = `No storage to download`;\r\n        return;\r\n    }\r\n    if (storage_device !== undefined){\r\n        storage_uploaded = storage_device.get_bytes();\r\n    }\r\n    const url = URL.createObjectURL(new Blob([storage_uploaded as Uint8Array]));\r\n    const a = document.createElement(\"a\");\r\n    const file_name = storage_input.value.split(/\\\\|\\//).at(-1);\r\n    a.download = file_name || \"storage.bin\";\r\n    a.href = url;\r\n    a.click();\r\n    setTimeout(() => URL.revokeObjectURL(url), 1000);\r\n}\r\n\r\nlet input_callback: undefined | (() => void);\r\n\r\n\r\nconsole_input.addEventListener(\"keydown\", e => {\r\n    if (!e.shiftKey && e.key === \"Enter\" && input_callback){\r\n        e.preventDefault();\r\n        if (null_terminate_input.checked){\r\n            console_input.value += \"\\0\";   \r\n        } else {\r\n            console_input.value += \"\\n\";\r\n        }\r\n        \r\n        input_callback();\r\n    }\r\n})\r\n\r\nconst console_io = new Console_IO({\r\n        read(callback){\r\n            input_callback = callback;\r\n        },\r\n        get text(){\r\n            return console_input.value;\r\n        },\r\n        set text(value: string){\r\n            console_input.value = value;\r\n        }\r\n    }, \r\n    (text) => {\r\n        console_output.write(text)\r\n    },\r\n    () => {\r\n        console_output.clear();\r\n        input_callback = undefined\r\n    }\r\n);\r\nconst canvas = document.getElementsByTagName(\"canvas\")[0];\r\nconst gl = canvas.getContext(\"webgl2\");\r\nif (!gl){\r\n    throw new Error(\"Unable to get webgl rendering context\");\r\n}\r\ncanvas.width = width || 32;\r\ncanvas.height = height || 32;\r\nconst display = new Gl_Display(gl, color);\r\nconst color_mode_input = document.getElementById(\"color-mode\") as HTMLOptionElement;\r\nif (color !== undefined) color_mode_input.value = Color_Mode[color];\r\ncolor_mode_input.addEventListener(\"change\", change_color_mode);\r\nfunction change_color_mode(){\r\n    const color_mode = enum_from_str(Color_Mode, color_mode_input.value);\r\n    display.color_mode = color_mode ?? display.color_mode;\r\n    display.update_display();\r\n}\r\nconst width_input = document.getElementById(\"display-width\") as HTMLInputElement;\r\nconst height_input = document.getElementById(\"display-height\") as HTMLInputElement;\r\nconst fullscreen_button = document.getElementById(\"display-fullscreen\") as HTMLButtonElement;\r\nfullscreen_button.onclick = () => {\r\n    canvas.requestPointerLock();\r\n    canvas.requestFullscreen();\r\n}\r\n\r\nwidth_input.value = \"\"+canvas.width\r\nheight_input.value = \"\"+canvas.height\r\nwidth_input.addEventListener(\"input\", resize_display);\r\nheight_input.addEventListener(\"input\", resize_display);\r\nresize_display();\r\nfunction resize_display(){\r\n    const width = parseInt(width_input.value) || 16;\r\n    const height = parseInt(height_input.value) || 16;\r\n    display.resize(width, height);\r\n}\r\n\r\nconst emulator = new Emulator({on_continue: frame, warn: (msg) => output_element.innerText += `${msg}\\n`});\r\nemulator.add_io_device(new Sound())\r\nemulator.add_io_device(console_io);\r\nemulator.add_io_device(display);\r\nemulator.add_io_device(new Clock());\r\nconst gamepad = new Pad();\r\ngamepad.add_pad(new KeyboardPad())\r\nemulator.add_io_device(gamepad);\r\nemulator.add_io_device(new RNG());\r\nemulator.add_io_device(new Keyboard());\r\nemulator.add_io_device(new Mouse(canvas));\r\n\r\nsource_input.oninput = oninput;\r\nauto_run_input.onchange = oninput;\r\n\r\nfunction oninput(){\r\n    if (started){\r\n        const size = 8;// Math.max(1, 0| (Number(localStorage.getItem(\"history-size\")) || 8));\r\n        localStorage.setItem(\"history-size\", \"\"+size)\r\n        const offset = (Math.max(0, 0| (Number(localStorage.getItem(\"history-offset\")) || 0)) + 1)  % size;\r\n        localStorage.setItem(\"history-offset\", \"\"+offset);\r\n        localStorage.setItem(`history-${offset}`, source_input.value);\r\n    }\r\n    if (auto_run_input.checked){\r\n        compile_and_run();\r\n    }\r\n}\r\n\r\nconst compile_and_run_button = document.getElementById(\"compile-and-run-button\") as HTMLButtonElement;\r\nconst pause_button = document.getElementById(\"pause-button\") as HTMLButtonElement;\r\nconst compile_and_reset_button = document.getElementById(\"compile-and-reset-button\") as HTMLButtonElement;\r\nconst step_button = document.getElementById(\"step-button\") as HTMLButtonElement;\r\n\r\ncompile_and_run_button.addEventListener(\"click\", compile_and_run);\r\ncompile_and_reset_button.addEventListener(\"click\", compile_and_reset);\r\npause_button.addEventListener(\"click\", pause);\r\nstep_button.addEventListener(\"click\", step);\r\n\r\nfunction step(){\r\n    process_step_result(emulator.step(), 1);\r\n    clock_speed_output.value = `stepping, executed ${format_int(clock_count)} instructions`;\r\n    console_output.flush();\r\n}\r\n\r\nfunction pause(){\r\n    if (running){\r\n        if (animation_frame){\r\n            cancelAnimationFrame(animation_frame);\r\n        }\r\n        animation_frame = undefined;\r\n        pause_button.textContent = \"Start\";\r\n        running = false;\r\n        step_button.disabled = running || input;\r\n    } else {\r\n        animation_frame = requestAnimationFrame(frame);\r\n        pause_button.textContent = \"Pause\";\r\n        running = true;\r\n        step_button.disabled = running;\r\n    }\r\n\r\n}\r\n\r\nfunction compile_and_run(){\r\n    if (!compile_and_reset()) {\r\n        return;\r\n    }\r\n    pause_button.textContent = \"Pause\";\r\n    pause_button.disabled = false;\r\n    if (!running){\r\n        running = true;\r\n        step_button.disabled = running;\r\n        frame();\r\n    }\r\n}\r\nfunction compile_and_reset(): boolean {\r\n    clock_count = 0;\r\n    output_element.innerText = \"\";\r\ntry {\r\n    const source = source_input.value;\r\n    const parsed = parse(source, {\r\n        constants: Object.fromEntries([\r\n            ...enum_strings(Gamepad_Key).map(key => [`@${key}`, `${1 << (Gamepad_Key[key as any] as any)}`]),\r\n            ...enum_strings(Gamepad_Exes).map(key => [`@${key}`, `${Gamepad_Exes[key as any]}`])\r\n        ]),\r\n    });\r\n\r\n    if (parsed.errors.length > 0){\r\n        output_element.innerText = parsed.errors.map(v => expand_warning(v, parsed.lines)+\"\\n\").join(\"\");\r\n        output_element.innerText += parsed.warnings.map(v => expand_warning(v, parsed.lines)+\"\\n\").join(\"\");\r\n        return false;\r\n    }\r\n    output_element.innerText += parsed.warnings.map(v => expand_warning(v, parsed.lines)+\"\\n\").join(\"\");\r\n    const [program, debug_info] = compile(parsed);\r\n    emulator.load_program(program, debug_info);\r\n\r\n    if (storage_uploaded){\r\n        const bytes = storage_uploaded.slice();\r\n        emulator.add_io_device(storage_device = new Storage(emulator.bits, storage_little.checked, bytes.length));\r\n        storage_device.set_bytes(bytes);\r\n        storage_msg.innerText = `loaded storage device with ${0| bytes.length / (emulator.bits / 8)} words, ${storage_loads++ % 2 === 0 ? \"flip\" : \"flop\"}`;\r\n    }\r\n\r\n    output_element.innerText += `\r\ncompilation done\r\nbits: ${emulator.bits}\r\nregister-count: ${emulator.registers.length}\r\nmemory-size: ${emulator.memory.length}\r\n`;\r\n    if (animation_frame){\r\n        cancelAnimationFrame(animation_frame);\r\n    }\r\n    animation_frame = undefined;\r\n    pause_button.textContent = \"Start\";\r\n    pause_button.disabled = false;\r\n    step_button.disabled = false;\r\n    running = false;\r\n    update_views();\r\n    return true;\r\n} catch (e){\r\n    output_element.innerText += (e as Error).message;\r\n    throw e;\r\n}\r\n}\r\n\r\nfunction frame(){\r\n    if (running){\r\n        try {\r\n        if (clock_speed > 0){\r\n            const start_time = performance.now();\r\n            const dt = start_time - last_step;\r\n            const its = Math.min(max_its, 0| dt * clock_speed / 1000);\r\n            const [res, steps] = emulator.burst(its, 16);\r\n            process_step_result(res, steps);\r\n            if (its === max_its || (res === Step_Result.Continue && steps !== its)){\r\n                last_step = start_time;\r\n                clock_speed_output.value = `${format_int(clock_speed)}Hz slowdown to ${format_int(steps*1000/16)}Hz, executed ${format_int(clock_count)} instructions`;\r\n            } else {\r\n                last_step += its * 1000 / clock_speed;\r\n                clock_speed_output.value = `${format_int(clock_speed)}Hz, executed ${format_int(clock_count)} instructions`;\r\n            }\r\n        } else {\r\n            const start_time = performance.now();\r\n            const [res, steps] = emulator.run(16);\r\n            const end_time = performance.now();\r\n            const dt = Math.max(0.1, end_time - start_time);\r\n            process_step_result(res, steps);\r\n            clock_speed_output.value = `${format_int(steps*1000/(dt))}Hz, executed ${format_int(clock_count)} instructions`;\r\n        }\r\n        } catch (e){\r\n            output_element.innerText += (e as Error).message + \"\\nProgram Halted\";\r\n            update_views();\r\n            throw e;\r\n        }\r\n    } else {\r\n        step_button.disabled = false;\r\n        pause_button.disabled = false;\r\n    }\r\n}\r\nfunction process_step_result(result: Step_Result, steps: number){\r\n    clock_count += steps;\r\n    animation_frame = undefined;\r\n    input = false;\r\n    debug_output_element.innerText = \"\";\r\n    switch (result){\r\n        case Step_Result.Continue: {\r\n            if (running){\r\n                animation_frame = requestAnimationFrame(frame);\r\n                running = true;\r\n                step_button.disabled = running;\r\n                pause_button.disabled = false;\r\n            }\r\n        } break;\r\n        case Step_Result.Input: {\r\n            step_button.disabled = true;\r\n            pause_button.disabled = false;\r\n            input = true;\r\n        } break;\r\n        case Step_Result.Halt: {\r\n            output_element.innerText += \"Program halted\";\r\n            step_button.disabled = true;\r\n            pause_button.disabled = true;\r\n            pause_button.textContent = \"Start\";\r\n            running = false\r\n        } break;\r\n        case Step_Result.Debug: {\r\n            if (running){\r\n                pause();\r\n            }\r\n            const msg = emulator.get_debug_message();\r\n            if (msg !== undefined){\r\n                debug_output_element.innerText = msg;\r\n            } else {\r\n                throw new Error(\"Debug not handled\");\r\n            }\r\n        } break;\r\n        default: {\r\n            console.warn(\"unkown step result\");\r\n        }\r\n    }\r\n    update_views();\r\n}\r\nfunction update_views(){\r\n    const bits = emulator.bits;\r\n    if (memory_update_input.checked){\r\n        memory_view.innerText = memoryToString(emulator.memory as Arr, 0, emulator.memory.length, bits);\r\n    }\r\n    register_view.innerText = \r\n        registers_to_string(emulator)\r\n    const lines = emulator.debug_info.pc_line_nrs\r\n    const line = lines[Math.min(emulator.pc, lines.length-1)];\r\n    source_input.set_pc_line(line);\r\n    source_input.set_line_profile(emulator.pc_counters.map((v, i) => [lines[i], v] as [number, number]));\r\n    console_output.flush();\r\n}\r\nchange_color_mode();\r\n\r\n\r\nstarted = true;\r\nif (srcurl){\r\n    fetch(srcurl).then(res => res.text()).then((text) => {\r\n        if (source_input.value){\r\n            return;\r\n        }\r\n        source_input.value = text;\r\n        compile_and_run();\r\n    });\r\n}\r\nelse\r\nautofill:\r\n{\r\n    const offset = Number(localStorage.getItem(\"history-offset\"));\r\n    if (!Number.isInteger(offset)){\r\n        break autofill;\r\n    }\r\n    source_input.value = localStorage.getItem(`history-${offset}`) ?? \"\";\r\n}\r\n\r\nif (storage_url) {\r\n    fetch(storage_url).then(res => res.arrayBuffer()).then(buffer => {\r\n        console.log(storage_uploaded, buffer);\r\n\r\n        if (storage_uploaded != null) {\r\n            return;\r\n        }\r\n        load_array_buffer(buffer);\r\n    }) \r\n}\r\n"],
  "mappings": "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",
  "names": []
}
